{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = useIsKeyboardShown;\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _reactNative = require(\"react-native\");\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\nfunction useIsKeyboardShown() {\n  var _React$useState = React.useState(false),\n    _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),\n    isKeyboardShown = _React$useState2[0],\n    setIsKeyboardShown = _React$useState2[1];\n  React.useEffect(function () {\n    var handleKeyboardShow = function handleKeyboardShow() {\n      return setIsKeyboardShown(true);\n    };\n    var handleKeyboardHide = function handleKeyboardHide() {\n      return setIsKeyboardShown(false);\n    };\n    var subscriptions;\n    if (_reactNative.Platform.OS === 'ios') {\n      subscriptions = [_reactNative.Keyboard.addListener('keyboardWillShow', handleKeyboardShow), _reactNative.Keyboard.addListener('keyboardWillHide', handleKeyboardHide)];\n    } else {\n      subscriptions = [_reactNative.Keyboard.addListener('keyboardDidShow', handleKeyboardShow), _reactNative.Keyboard.addListener('keyboardDidHide', handleKeyboardHide)];\n    }\n    return function () {\n      subscriptions.forEach(function (s) {\n        return s.remove();\n      });\n    };\n  }, []);\n  return isKeyboardShown;\n}","map":{"version":3,"sources":["useIsKeyboardShown.tsx"],"names":["useIsKeyboardShown","isKeyboardShown","setIsKeyboardShown","React","useState","useEffect","handleKeyboardShow","handleKeyboardHide","subscriptions","Platform","OS","Keyboard","addListener","forEach","s","remove"],"mappings":";;;;;;AAAA;AACA;AAAsE;AAAA;AAEvD,SAASA,kBAAkB,GAAG;EAC3C,sBAA8CG,KAAK,CAACC,QAAQ,CAAC,KAAK,CAAC;IAAA;IAA5DH,eAAe;IAAEC,kBAAkB;EAE1CC,KAAK,CAACE,SAAS,CAAC,YAAM;IACpB,IAAMC,kBAAkB,GAAG,SAArBA,kBAAkB;MAAA,OAASJ,kBAAkB,CAAC,IAAI,CAAC;IAAA;IACzD,IAAMK,kBAAkB,GAAG,SAArBA,kBAAkB;MAAA,OAASL,kBAAkB,CAAC,KAAK,CAAC;IAAA;IAE1D,IAAIM,aAAoC;IAExC,IAAIC,qBAAQ,CAACC,EAAE,KAAK,KAAK,EAAE;MACzBF,aAAa,GAAG,CACdG,qBAAQ,CAACC,WAAW,CAAC,kBAAkB,EAAEN,kBAAkB,CAAC,EAC5DK,qBAAQ,CAACC,WAAW,CAAC,kBAAkB,EAAEL,kBAAkB,CAAC,CAC7D;IACH,CAAC,MAAM;MACLC,aAAa,GAAG,CACdG,qBAAQ,CAACC,WAAW,CAAC,iBAAiB,EAAEN,kBAAkB,CAAC,EAC3DK,qBAAQ,CAACC,WAAW,CAAC,iBAAiB,EAAEL,kBAAkB,CAAC,CAC5D;IACH;IAEA,OAAO,YAAM;MACXC,aAAa,CAACK,OAAO,CAAEC,UAAAA,CAAC;QAAA,OAAKA,CAAC,CAACC,MAAM,EAAE;MAAA,EAAC;IAC1C,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,OAAOd,eAAe;AACxB","sourceRoot":"../../src","sourcesContent":["import * as React from 'react';\nimport { Keyboard, Platform } from 'react-native';\nexport default function useIsKeyboardShown() {\n  const [isKeyboardShown, setIsKeyboardShown] = React.useState(false);\n  React.useEffect(() => {\n    const handleKeyboardShow = () => setIsKeyboardShown(true);\n    const handleKeyboardHide = () => setIsKeyboardShown(false);\n    let subscriptions;\n    if (Platform.OS === 'ios') {\n      subscriptions = [Keyboard.addListener('keyboardWillShow', handleKeyboardShow), Keyboard.addListener('keyboardWillHide', handleKeyboardHide)];\n    } else {\n      subscriptions = [Keyboard.addListener('keyboardDidShow', handleKeyboardShow), Keyboard.addListener('keyboardDidHide', handleKeyboardHide)];\n    }\n    return () => {\n      subscriptions.forEach(s => s.remove());\n    };\n  }, []);\n  return isKeyboardShown;\n}\n//# sourceMappingURL=useIsKeyboardShown.js.map"]},"metadata":{},"sourceType":"script"}