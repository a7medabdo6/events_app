{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _extends3 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _native = require(\"@react-navigation/native\");\nvar _HeaderSegment = _interopRequireDefault(require(\"./HeaderSegment\"));\nvar _HeaderTitle = _interopRequireDefault(require(\"./HeaderTitle\"));\nvar _debounce = _interopRequireDefault(require(\"../../utils/debounce\"));\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nvar _default = React.memo(function Header(props) {\n  var scene = props.scene,\n    previous = props.previous,\n    layout = props.layout,\n    insets = props.insets,\n    navigation = props.navigation,\n    styleInterpolator = props.styleInterpolator;\n  var options = scene.descriptor.options;\n  var title = typeof options.headerTitle !== 'function' && options.headerTitle !== undefined ? options.headerTitle : options.title !== undefined ? options.title : scene.route.name;\n  var leftLabel;\n  if (options.headerBackTitle !== undefined) {\n    leftLabel = options.headerBackTitle;\n  } else if (previous) {\n    var o = previous.descriptor.options;\n    leftLabel = typeof o.headerTitle !== 'function' && o.headerTitle !== undefined ? o.headerTitle : o.title !== undefined ? o.title : previous.route.name;\n  }\n  var goBack = React.useCallback((0, _debounce.default)(function () {\n    if (navigation.isFocused() && navigation.canGoBack()) {\n      navigation.dispatch((0, _extends3.default)({}, _native.StackActions.pop(), {\n        source: scene.route.key\n      }));\n    }\n  }, 50), [navigation, scene.route.key]);\n  return React.createElement(_HeaderSegment.default, _extends({}, options, {\n    insets: insets,\n    layout: layout,\n    scene: scene,\n    title: title,\n    leftLabel: leftLabel,\n    headerTitle: typeof options.headerTitle !== 'function' ? function (props) {\n      return React.createElement(_HeaderTitle.default, props);\n    } : options.headerTitle,\n    onGoBack: previous ? goBack : undefined,\n    styleInterpolator: styleInterpolator\n  }));\n});\nexports.default = _default;","map":{"version":3,"mappings":";;;;;;AAAA;AACA;AAEA;AACA;AACA;AAAA;AAAA;;;;;;;;;;;;;;;eAGeA,KAAK,CAACC,IAAN,CAAW,SAASC,MAAT,CAAgBC,KAAhB,EAAyC;EACjE,IACEC,KADI,GAOFD,KAPJ,CACEC,KADI;IAEJC,QAFI,GAOFF,KAPJ,CAEEE,QAFI;IAGJC,MAHI,GAOFH,KAPJ,CAGEG,MAHI;IAIJC,MAJI,GAOFJ,KAPJ,CAIEI,MAJI;IAKJC,UALI,GAOFL,KAPJ,CAKEK,UALI;IAMJC,oBACEN,KAPJ,CAMEM;EAEF,IAAQC,UAAYN,KAAK,CAACO,UAA1B,CAAQD;EACR,IAAME,KAAK,GACT,OAAOF,OAAO,CAACG,WAAf,KAA+B,UAA/B,IACAH,OAAO,CAACG,WAAR,KAAwBC,SADxB,GAEIJ,OAAO,CAACG,WAFZ,GAGIH,OAAO,CAACE,KAAR,KAAkBE,SAAlB,GACAJ,OAAO,CAACE,KADR,GAEAR,KAAK,CAACW,KAAN,CAAYC,IANlB;EAQA,IAAIC,SAAJ;EAIA,IAAIP,OAAO,CAACQ,eAAR,KAA4BJ,SAAhC,EAA2C;IACzCG,SAAS,GAAGP,OAAO,CAACQ,eAApB;EACD,CAFD,MAEO,IAAIb,QAAJ,EAAc;IACnB,IAAMc,CAAC,GAAGd,QAAQ,CAACM,UAAT,CAAoBD,OAA9B;IAEAO,SAAS,GACP,OAAOE,CAAC,CAACN,WAAT,KAAyB,UAAzB,IAAuCM,CAAC,CAACN,WAAF,KAAkBC,SAAzD,GACIK,CAAC,CAACN,WADN,GAEIM,CAAC,CAACP,KAAF,KAAYE,SAAZ,GACAK,CAAC,CAACP,KADF,GAEAP,QAAQ,CAACU,KAAT,CAAeC,IALrB;EAMD;EAGD,IAAMI,MAAM,GAAGpB,KAAK,CAACqB,WAAN,CACbC,qBAAQ,EAAC,YAAM;IACb,IAAId,UAAU,CAACe,SAAX,MAA0Bf,UAAU,CAACgB,SAAX,EAA9B,EAAsD;MACpDhB,UAAU,CAACiB,QAAX,4BACKC,oBAAY,CAACC,GAAb,EADe;QAElBC,MAAM,EAAExB,KAAK,CAACW,KAAN,CAAYc;MAAAA,GAFtB;IAID;EACF,CAPO,EAOL,EAPK,CADK,EASb,CAACrB,UAAD,EAAaJ,KAAK,CAACW,KAAN,CAAYc,GAAzB,CATa,CAAf;EAYA,OACE7B,oBAAC8B,sBAAD,eACMpB,OADN;IAEEH,MAAM,EAAEA,MAFV;IAGED,MAAM,EAAEA,MAHV;IAIEF,KAAK,EAAEA,KAJT;IAKEQ,KAAK,EAAEA,KALT;IAMEK,SAAS,EAAEA,SANb;IAOEJ,WAAW,EACT,OAAOH,OAAO,CAACG,WAAf,KAA+B,UAA/B,GACKV,eAAD;MAAA,OAAkCH,oBAAC+B,oBAAD,EAAiB5B,KAAjB,CADtC;IAAA,IAEIO,OAAO,CAACG,WAVhB;IAYEmB,QAAQ,EAAE3B,QAAQ,GAAGe,MAAH,GAAYN,SAZhC;IAaEL,iBAAiB,EAAEA;EAbrB,GADF;AAiBD,CAjEc,CAAf;AAAA","names":["React","memo","Header","props","scene","previous","layout","insets","navigation","styleInterpolator","options","descriptor","title","headerTitle","undefined","route","name","leftLabel","headerBackTitle","o","goBack","useCallback","debounce","isFocused","canGoBack","dispatch","StackActions","pop","source","key","HeaderSegment","HeaderTitle","onGoBack"],"sources":["Header.tsx"],"sourcesContent":["import * as React from 'react';\nimport { StackActions } from '@react-navigation/native';\n\nimport HeaderSegment from './HeaderSegment';\nimport HeaderTitle from './HeaderTitle';\nimport debounce from '../../utils/debounce';\nimport type { StackHeaderProps, StackHeaderTitleProps } from '../../types';\n\nexport default React.memo(function Header(props: StackHeaderProps) {\n  const {\n    scene,\n    previous,\n    layout,\n    insets,\n    navigation,\n    styleInterpolator,\n  } = props;\n  const { options } = scene.descriptor;\n  const title =\n    typeof options.headerTitle !== 'function' &&\n    options.headerTitle !== undefined\n      ? options.headerTitle\n      : options.title !== undefined\n      ? options.title\n      : scene.route.name;\n\n  let leftLabel;\n\n  // The label for the left back button shows the title of the previous screen\n  // If a custom label is specified, we use it, otherwise use previous screen's title\n  if (options.headerBackTitle !== undefined) {\n    leftLabel = options.headerBackTitle;\n  } else if (previous) {\n    const o = previous.descriptor.options;\n\n    leftLabel =\n      typeof o.headerTitle !== 'function' && o.headerTitle !== undefined\n        ? o.headerTitle\n        : o.title !== undefined\n        ? o.title\n        : previous.route.name;\n  }\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const goBack = React.useCallback(\n    debounce(() => {\n      if (navigation.isFocused() && navigation.canGoBack()) {\n        navigation.dispatch({\n          ...StackActions.pop(),\n          source: scene.route.key,\n        });\n      }\n    }, 50),\n    [navigation, scene.route.key]\n  );\n\n  return (\n    <HeaderSegment\n      {...options}\n      insets={insets}\n      layout={layout}\n      scene={scene}\n      title={title}\n      leftLabel={leftLabel}\n      headerTitle={\n        typeof options.headerTitle !== 'function'\n          ? (props: StackHeaderTitleProps) => <HeaderTitle {...props} />\n          : options.headerTitle\n      }\n      onGoBack={previous ? goBack : undefined}\n      styleInterpolator={styleInterpolator}\n    />\n  );\n});\n"]},"metadata":{},"sourceType":"script"}