{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar _exportNames = {\n  currency: true,\n  decimalSeparator: true,\n  digitGroupingSeparator: true,\n  isoCurrencyCodes: true,\n  isMetric: true,\n  isRTL: true,\n  locale: true,\n  locales: true,\n  timezone: true,\n  region: true,\n  getLocales: true,\n  getCalendars: true,\n  getLocalizationAsync: true\n};\nexports.getLocales = exports.getCalendars = exports.digitGroupingSeparator = exports.decimalSeparator = exports.currency = void 0;\nexports.getLocalizationAsync = getLocalizationAsync;\nexports.timezone = exports.region = exports.locales = exports.locale = exports.isoCurrencyCodes = exports.isRTL = exports.isMetric = void 0;\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\nvar _ExpoLocalization = _interopRequireDefault(require(\"./ExpoLocalization\"));\nvar _Localization = require(\"./Localization.types\");\nObject.keys(_Localization).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;\n  if (key in exports && exports[key] === _Localization[key]) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _Localization[key];\n    }\n  });\n});\nvar currency = _ExpoLocalization.default.currency;\nexports.currency = currency;\nvar decimalSeparator = _ExpoLocalization.default.decimalSeparator;\nexports.decimalSeparator = decimalSeparator;\nvar digitGroupingSeparator = _ExpoLocalization.default.digitGroupingSeparator;\nexports.digitGroupingSeparator = digitGroupingSeparator;\nvar isoCurrencyCodes = _ExpoLocalization.default.isoCurrencyCodes;\nexports.isoCurrencyCodes = isoCurrencyCodes;\nvar isMetric = _ExpoLocalization.default.isMetric;\nexports.isMetric = isMetric;\nvar isRTL = _ExpoLocalization.default.isRTL;\nexports.isRTL = isRTL;\nvar locale = _ExpoLocalization.default.locale;\nexports.locale = locale;\nvar locales = _ExpoLocalization.default.locales;\nexports.locales = locales;\nvar timezone = _ExpoLocalization.default.timezone;\nexports.timezone = timezone;\nvar region = _ExpoLocalization.default.region;\nexports.region = region;\nvar getLocales = _ExpoLocalization.default.getLocales;\nexports.getLocales = getLocales;\nvar getCalendars = _ExpoLocalization.default.getCalendars;\nexports.getCalendars = getCalendars;\nfunction getLocalizationAsync() {\n  return _regenerator.default.async(function getLocalizationAsync$(_context) {\n    while (1) switch (_context.prev = _context.next) {\n      case 0:\n        _context.next = 2;\n        return _regenerator.default.awrap(_ExpoLocalization.default.getLocalizationAsync());\n      case 2:\n        return _context.abrupt(\"return\", _context.sent);\n      case 3:\n      case \"end\":\n        return _context.stop();\n    }\n  }, null, null, null, Promise);\n}","map":{"version":3,"sources":["../src/Localization.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AAAA;EAAA;EAAA;EAAA;EAAA;IAAA;IAAA;MAAA;IAAA;EAAA;AAAA;AASO,IAAM,QAAQ,GAAG,yBAAgB,CAAC,QAAQ;AAAC;AAS3C,IAAM,gBAAgB,GAAG,yBAAgB,CAAC,gBAAgB;AAAC;AAS3D,IAAM,sBAAsB,GAAG,yBAAgB,CAAC,sBAAsB;AAAC;AAOvE,IAAM,gBAAgB,GAAG,yBAAgB,CAAC,gBAAgB;AAAC;AAQ3D,IAAM,QAAQ,GAAG,yBAAgB,CAAC,QAAQ;AAAC;AAU3C,IAAM,KAAK,GAAG,yBAAgB,CAAC,KAAK;AAAC;AAUrC,IAAM,MAAM,GAAG,yBAAgB,CAAC,MAAM;AAAC;AAUvC,IAAM,OAAO,GAAG,yBAAgB,CAAC,OAAO;AAAC;AAYzC,IAAM,QAAQ,GAAG,yBAAgB,CAAC,QAAQ;AAAC;AAU3C,IAAM,MAAM,GAAG,yBAAgB,CAAC,MAAM;AAAC;AAoBvC,IAAM,UAAU,GAAG,yBAAgB,CAAC,UAAU;AAAC;AAe/C,IAAM,YAAY,GAAG,yBAAgB,CAAC,YAAY;AAAC;AAkBnD,SAAe,oBAAoB;EAAA;IAAA;MAAA;QAAA;QAAA,kCAC3B,yBAAgB,CAAC,oBAAoB,EAAE;MAAA;QAAA;MAAA;MAAA;QAAA;IAAA;EAAA;AAAA","sourcesContent":["import ExpoLocalization from './ExpoLocalization';\nimport { Localization } from './Localization.types';\nexport * from './Localization.types';\n\n// @needsAudit\n/**\n * @deprecated Use Localization.getLocales() instead.\n * Three-character ISO 4217 currency code. Returns `null` on web.\n *\n * @example `'USD'`, `'EUR'`, `'CNY'`, `null`\n */\nexport const currency = ExpoLocalization.currency;\n\n// @needsAudit\n/**\n * @deprecated Use Localization.getLocales() instead.\n * Decimal separator used for formatting numbers.\n *\n * @example `','`, `'.'`\n */\nexport const decimalSeparator = ExpoLocalization.decimalSeparator;\n\n// @needsAudit\n/**\n * @deprecated Use Localization.getLocales() instead.\n * Digit grouping separator used when formatting numbers larger than 1000.\n *\n * @example `'.'`, `''`, `','`\n */\nexport const digitGroupingSeparator = ExpoLocalization.digitGroupingSeparator;\n\n// @needsAudit\n/**\n * @deprecated Use Localization.getLocales() instead.\n * A list of all the supported language ISO codes.\n */\nexport const isoCurrencyCodes = ExpoLocalization.isoCurrencyCodes;\n\n// @needsAudit\n/**\n * @deprecated Use Localization.getLocales() instead.\n * Boolean value that indicates whether the system uses the metric system.\n * On Android and web, this is inferred from the current region.\n */\nexport const isMetric = ExpoLocalization.isMetric;\n\n// @needsAudit\n/**\n * @deprecated Use Localization.getLocales() instead.\n * Returns if the system's language is written from Right-to-Left.\n * This can be used to build features like [bidirectional icons](https://material.io/design/usability/bidirectionality.html).\n *\n * Returns `false` in Server Side Rendering (SSR) environments.\n */\nexport const isRTL = ExpoLocalization.isRTL;\n\n// @needsAudit\n/**\n * Consider using Localization.getLocales() for a list of user preferred locales instead.\n * An [IETF BCP 47 language tag](https://en.wikipedia.org/wiki/IETF_language_tag),\n * consisting of a two-character language code and optional script, region and variant codes.\n *\n * @example `'en'`, `'en-US'`, `'zh-Hans'`, `'zh-Hans-CN'`, `'en-emodeng'`\n */\nexport const locale = ExpoLocalization.locale;\n\n// @needsAudit\n/**\n * @deprecated Use Localization.getLocales() instead.\n * List of all the native languages provided by the user settings.\n * These are returned in the order the user defines in their device settings.\n *\n * @example `['en', 'en-US', 'zh-Hans', 'zh-Hans-CN', 'en-emodeng']`\n */\nexport const locales = ExpoLocalization.locales;\n\n// @needsAudit\n/**\n * @deprecated Use Localization.getLocales() instead.\n * The current time zone in display format.\n * On Web time zone is calculated with Intl.DateTimeFormat().resolvedOptions().timeZone. For a\n * better estimation you could use the moment-timezone package but it will add significant bloat to\n * your website's bundle size.\n *\n * @example `'America/Los_Angeles'`\n */\nexport const timezone = ExpoLocalization.timezone;\n\n// @needsAudit\n/**\n * @deprecated Use Localization.getLocales() instead.\n * The region code for your device that comes from the Region setting under Language & Region on iOS.\n * This value is always available on iOS, but might return `null` on Android or web.\n *\n * @example `'US'`, `'NZ'`, `null`\n */\nexport const region = ExpoLocalization.region;\n\n/**\n * List of user's locales, returned as an array of objects of type `Locale`.\n * Guaranteed to contain at least 1 element.\n * These are returned in the order the user defines in their device settings.\n * On the web currency and measurements systems are not provided, instead returned as null.\n * If needed, you can infer them from the current region using a lookup table.\n * @example `[{\n    \"languageTag\": \"pl-PL\",\n    \"languageCode\": \"pl\",\n    \"textDirection\": \"ltr\",\n    \"digitGroupingSeparator\": \" \",\n    \"decimalSeparator\": \",\",\n    \"measurementSystem\": \"metric\",\n    \"currencyCode\": \"PLN\",\n    \"currencySymbol\": \"zÅ‚\",\n    \"regionCode\": \"PL\"\n  }]`\n */\nexport const getLocales = ExpoLocalization.getLocales;\n\n/**\n * List of user's preferred calendars, returned as an array of objects of type `Calendar`.\n * Guaranteed to contain at least 1 element.\n * For now always returns a single element, but it's likely to return a user preference list on some platforms in the future.\n * @example `[\n    {\n      \"calendar\": \"gregory\",\n      \"timeZone\": \"Europe/Warsaw\",\n      \"uses24hourClock\": true,\n      \"firstWeekday\": 1\n    }\n  ]`\n */\nexport const getCalendars = ExpoLocalization.getCalendars;\n\n// @needsAudit\n/**\n * Get the latest native values from the device. Locale can be changed on some Android devices\n * without resetting the app.\n * > On iOS, changing the locale will cause the device to reset meaning the constants will always be\n * correct.\n *\n * @example\n * ```ts\n * // When the app returns from the background on Android...\n *\n * const { locale } = await Localization.getLocalizationAsync();\n * ```\n * @deprecated\n * Use Localization.getLocales() or Localization.getCalendars() instead.\n */\nexport async function getLocalizationAsync(): Promise<Localization> {\n  return await ExpoLocalization.getLocalizationAsync();\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}