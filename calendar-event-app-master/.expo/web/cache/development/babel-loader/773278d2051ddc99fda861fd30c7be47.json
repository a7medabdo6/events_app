{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _reactNative = require(\"react-native\");\nvar _native = require(\"@react-navigation/native\");\nvar _Card = _interopRequireDefault(require(\"./Card\"));\nvar _HeaderHeightContext = _interopRequireDefault(require(\"../../utils/HeaderHeightContext\"));\nvar _HeaderShownContext = _interopRequireDefault(require(\"../../utils/HeaderShownContext\"));\nvar _PreviousSceneContext = _interopRequireDefault(require(\"../../utils/PreviousSceneContext\"));\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\nvar EPSILON = 0.1;\nfunction CardContainer(_ref) {\n  var active = _ref.active,\n    cardOverlay = _ref.cardOverlay,\n    cardOverlayEnabled = _ref.cardOverlayEnabled,\n    cardShadowEnabled = _ref.cardShadowEnabled,\n    cardStyle = _ref.cardStyle,\n    cardStyleInterpolator = _ref.cardStyleInterpolator,\n    closing = _ref.closing,\n    gesture = _ref.gesture,\n    focused = _ref.focused,\n    gestureDirection = _ref.gestureDirection,\n    gestureEnabled = _ref.gestureEnabled,\n    gestureResponseDistance = _ref.gestureResponseDistance,\n    gestureVelocityImpact = _ref.gestureVelocityImpact,\n    getPreviousScene = _ref.getPreviousScene,\n    getFocusedRoute = _ref.getFocusedRoute,\n    mode = _ref.mode,\n    headerMode = _ref.headerMode,\n    headerShown = _ref.headerShown,\n    headerStyleInterpolator = _ref.headerStyleInterpolator,\n    hasAbsoluteHeader = _ref.hasAbsoluteHeader,\n    headerHeight = _ref.headerHeight,\n    onHeaderHeightChange = _ref.onHeaderHeightChange,\n    isParentHeaderShown = _ref.isParentHeaderShown,\n    index = _ref.index,\n    layout = _ref.layout,\n    onCloseRoute = _ref.onCloseRoute,\n    onOpenRoute = _ref.onOpenRoute,\n    onPageChangeCancel = _ref.onPageChangeCancel,\n    onPageChangeConfirm = _ref.onPageChangeConfirm,\n    onPageChangeStart = _ref.onPageChangeStart,\n    onGestureCancel = _ref.onGestureCancel,\n    onGestureEnd = _ref.onGestureEnd,\n    onGestureStart = _ref.onGestureStart,\n    onTransitionEnd = _ref.onTransitionEnd,\n    onTransitionStart = _ref.onTransitionStart,\n    renderHeader = _ref.renderHeader,\n    renderScene = _ref.renderScene,\n    safeAreaInsetBottom = _ref.safeAreaInsetBottom,\n    safeAreaInsetLeft = _ref.safeAreaInsetLeft,\n    safeAreaInsetRight = _ref.safeAreaInsetRight,\n    safeAreaInsetTop = _ref.safeAreaInsetTop,\n    scene = _ref.scene,\n    transitionSpec = _ref.transitionSpec;\n  var handleOpen = function handleOpen() {\n    var route = scene.route;\n    onTransitionEnd === null || onTransitionEnd === void 0 ? void 0 : onTransitionEnd({\n      route: route\n    }, false);\n    onOpenRoute({\n      route: route\n    });\n  };\n  var handleClose = function handleClose() {\n    var route = scene.route;\n    onTransitionEnd === null || onTransitionEnd === void 0 ? void 0 : onTransitionEnd({\n      route: route\n    }, true);\n    onCloseRoute({\n      route: route\n    });\n  };\n  var handleGestureBegin = function handleGestureBegin() {\n    var route = scene.route;\n    onPageChangeStart === null || onPageChangeStart === void 0 ? void 0 : onPageChangeStart();\n    onGestureStart === null || onGestureStart === void 0 ? void 0 : onGestureStart({\n      route: route\n    });\n  };\n  var handleGestureCanceled = function handleGestureCanceled() {\n    var route = scene.route;\n    onPageChangeCancel === null || onPageChangeCancel === void 0 ? void 0 : onPageChangeCancel();\n    onGestureCancel === null || onGestureCancel === void 0 ? void 0 : onGestureCancel({\n      route: route\n    });\n  };\n  var handleGestureEnd = function handleGestureEnd() {\n    var route = scene.route;\n    onGestureEnd === null || onGestureEnd === void 0 ? void 0 : onGestureEnd({\n      route: route\n    });\n  };\n  var handleTransition = function handleTransition(_ref2) {\n    var closing = _ref2.closing,\n      gesture = _ref2.gesture;\n    var route = scene.route;\n    if (!gesture) {\n      onPageChangeConfirm === null || onPageChangeConfirm === void 0 ? void 0 : onPageChangeConfirm(true);\n    } else if (active && closing) {\n      onPageChangeConfirm === null || onPageChangeConfirm === void 0 ? void 0 : onPageChangeConfirm(false);\n    } else {\n      onPageChangeCancel === null || onPageChangeCancel === void 0 ? void 0 : onPageChangeCancel();\n    }\n    onTransitionStart === null || onTransitionStart === void 0 ? void 0 : onTransitionStart({\n      route: route\n    }, closing);\n  };\n  var insets = {\n    top: safeAreaInsetTop,\n    right: safeAreaInsetRight,\n    bottom: safeAreaInsetBottom,\n    left: safeAreaInsetLeft\n  };\n  var _useTheme = (0, _native.useTheme)(),\n    colors = _useTheme.colors;\n  var _React$useState = React.useState('box-none'),\n    _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),\n    pointerEvents = _React$useState2[0],\n    setPointerEvents = _React$useState2[1];\n  React.useEffect(function () {\n    var _scene$progress$next, _scene$progress$next$;\n    var listener = (_scene$progress$next = scene.progress.next) === null || _scene$progress$next === void 0 ? void 0 : (_scene$progress$next$ = _scene$progress$next.addListener) === null || _scene$progress$next$ === void 0 ? void 0 : _scene$progress$next$.call(_scene$progress$next, function (_ref3) {\n      var value = _ref3.value;\n      setPointerEvents(value <= EPSILON ? 'box-none' : 'none');\n    });\n    return function () {\n      if (listener) {\n        var _scene$progress$next2, _scene$progress$next3;\n        (_scene$progress$next2 = scene.progress.next) === null || _scene$progress$next2 === void 0 ? void 0 : (_scene$progress$next3 = _scene$progress$next2.removeListener) === null || _scene$progress$next3 === void 0 ? void 0 : _scene$progress$next3.call(_scene$progress$next2, listener);\n      }\n    };\n  }, [pointerEvents, scene.progress.next]);\n  var isCurrentHeaderShown = headerMode !== 'none' && headerShown !== false;\n  var previousScene = getPreviousScene({\n    route: scene.route\n  });\n  return React.createElement(_Card.default, {\n    index: index,\n    gestureDirection: gestureDirection,\n    layout: layout,\n    insets: insets,\n    gesture: gesture,\n    current: scene.progress.current,\n    next: scene.progress.next,\n    closing: closing,\n    onOpen: handleOpen,\n    onClose: handleClose,\n    overlay: cardOverlay,\n    overlayEnabled: cardOverlayEnabled,\n    shadowEnabled: cardShadowEnabled,\n    onTransition: handleTransition,\n    onGestureBegin: handleGestureBegin,\n    onGestureCanceled: handleGestureCanceled,\n    onGestureEnd: handleGestureEnd,\n    gestureEnabled: gestureEnabled,\n    gestureResponseDistance: gestureResponseDistance,\n    gestureVelocityImpact: gestureVelocityImpact,\n    transitionSpec: transitionSpec,\n    styleInterpolator: cardStyleInterpolator,\n    accessibilityElementsHidden: !focused,\n    importantForAccessibility: focused ? 'auto' : 'no-hide-descendants',\n    pointerEvents: active ? 'box-none' : pointerEvents,\n    pageOverflowEnabled: headerMode === 'screen' && mode === 'card',\n    containerStyle: hasAbsoluteHeader ? {\n      marginTop: headerHeight\n    } : null,\n    contentStyle: [{\n      backgroundColor: colors.background\n    }, cardStyle],\n    style: [{\n      overflow: active ? undefined : 'hidden'\n    }, _reactNative.StyleSheet.absoluteFill]\n  }, React.createElement(_reactNative.View, {\n    style: styles.container\n  }, React.createElement(_reactNative.View, {\n    style: styles.scene\n  }, React.createElement(_PreviousSceneContext.default.Provider, {\n    value: previousScene\n  }, React.createElement(_HeaderShownContext.default.Provider, {\n    value: isParentHeaderShown || isCurrentHeaderShown\n  }, React.createElement(_HeaderHeightContext.default.Provider, {\n    value: headerHeight\n  }, renderScene({\n    route: scene.route\n  }))))), headerMode === 'screen' ? renderHeader({\n    mode: 'screen',\n    layout: layout,\n    insets: insets,\n    scenes: [previousScene, scene],\n    getPreviousScene: getPreviousScene,\n    getFocusedRoute: getFocusedRoute,\n    gestureDirection: gestureDirection,\n    styleInterpolator: headerStyleInterpolator,\n    onContentHeightChange: onHeaderHeightChange\n  }) : null));\n}\nvar _default = React.memo(CardContainer);\nexports.default = _default;\nvar styles = _reactNative.StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'column-reverse'\n  },\n  scene: {\n    flex: 1\n  }\n});","map":{"version":3,"mappings":"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","names":["EPSILON","CardContainer","active","cardOverlay","cardOverlayEnabled","cardShadowEnabled","cardStyle","cardStyleInterpolator","closing","gesture","focused","gestureDirection","gestureEnabled","gestureResponseDistance","gestureVelocityImpact","getPreviousScene","getFocusedRoute","mode","headerMode","headerShown","headerStyleInterpolator","hasAbsoluteHeader","headerHeight","onHeaderHeightChange","isParentHeaderShown","index","layout","onCloseRoute","onOpenRoute","onPageChangeCancel","onPageChangeConfirm","onPageChangeStart","onGestureCancel","onGestureEnd","onGestureStart","onTransitionEnd","onTransitionStart","renderHeader","renderScene","safeAreaInsetBottom","safeAreaInsetLeft","safeAreaInsetRight","safeAreaInsetTop","scene","transitionSpec","handleOpen","route","handleClose","handleGestureBegin","handleGestureCanceled","handleGestureEnd","handleTransition","insets","top","right","bottom","left","useTheme","colors","React","useState","pointerEvents","setPointerEvents","useEffect","listener","progress","next","_scene$progress$next","addListener","_scene$progress$next$","value","removeListener","isCurrentHeaderShown","previousScene","Card","current","onOpen","onClose","overlay","overlayEnabled","shadowEnabled","onTransition","onGestureBegin","onGestureCanceled","styleInterpolator","accessibilityElementsHidden","importantForAccessibility","pageOverflowEnabled","containerStyle","marginTop","contentStyle","backgroundColor","background","style","overflow","undefined","StyleSheet","absoluteFill","View","styles","container","PreviousSceneContext","Provider","HeaderShownContext","HeaderHeightContext","scenes","onContentHeightChange","memo","create","flex","flexDirection"],"sources":["CardContainer.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Animated, View, StyleSheet, StyleProp, ViewStyle } from 'react-native';\nimport { Route, useTheme } from '@react-navigation/native';\nimport type { Props as HeaderContainerProps } from '../Header/HeaderContainer';\nimport Card from './Card';\nimport HeaderHeightContext from '../../utils/HeaderHeightContext';\nimport HeaderShownContext from '../../utils/HeaderShownContext';\nimport PreviousSceneContext from '../../utils/PreviousSceneContext';\nimport type {\n  Scene,\n  Layout,\n  StackHeaderMode,\n  StackCardMode,\n  TransitionPreset,\n} from '../../types';\n\ntype Props = TransitionPreset & {\n  index: number;\n  active: boolean;\n  focused: boolean;\n  closing: boolean;\n  layout: Layout;\n  gesture: Animated.Value;\n  scene: Scene<Route<string>>;\n  safeAreaInsetTop: number;\n  safeAreaInsetRight: number;\n  safeAreaInsetBottom: number;\n  safeAreaInsetLeft: number;\n  cardOverlay?: (props: {\n    style: Animated.WithAnimatedValue<StyleProp<ViewStyle>>;\n  }) => React.ReactNode;\n  cardOverlayEnabled?: boolean;\n  cardShadowEnabled?: boolean;\n  cardStyle?: StyleProp<ViewStyle>;\n  getPreviousScene: (props: {\n    route: Route<string>;\n  }) => Scene<Route<string>> | undefined;\n  getFocusedRoute: () => Route<string>;\n  renderHeader: (props: HeaderContainerProps) => React.ReactNode;\n  renderScene: (props: { route: Route<string> }) => React.ReactNode;\n  onOpenRoute: (props: { route: Route<string> }) => void;\n  onCloseRoute: (props: { route: Route<string> }) => void;\n  onTransitionStart?: (\n    props: { route: Route<string> },\n    closing: boolean\n  ) => void;\n  onTransitionEnd?: (props: { route: Route<string> }, closing: boolean) => void;\n  onPageChangeStart?: () => void;\n  onPageChangeConfirm?: (force: boolean) => void;\n  onPageChangeCancel?: () => void;\n  onGestureStart?: (props: { route: Route<string> }) => void;\n  onGestureEnd?: (props: { route: Route<string> }) => void;\n  onGestureCancel?: (props: { route: Route<string> }) => void;\n  gestureEnabled?: boolean;\n  gestureResponseDistance?: {\n    vertical?: number;\n    horizontal?: number;\n  };\n  gestureVelocityImpact?: number;\n  mode: StackCardMode;\n  headerMode: StackHeaderMode;\n  headerShown: boolean;\n  hasAbsoluteHeader: boolean;\n  headerHeight: number;\n  onHeaderHeightChange: (props: {\n    route: Route<string>;\n    height: number;\n  }) => void;\n  isParentHeaderShown: boolean;\n};\n\nconst EPSILON = 0.1;\n\nfunction CardContainer({\n  active,\n  cardOverlay,\n  cardOverlayEnabled,\n  cardShadowEnabled,\n  cardStyle,\n  cardStyleInterpolator,\n  closing,\n  gesture,\n  focused,\n  gestureDirection,\n  gestureEnabled,\n  gestureResponseDistance,\n  gestureVelocityImpact,\n  getPreviousScene,\n  getFocusedRoute,\n  mode,\n  headerMode,\n  headerShown,\n  headerStyleInterpolator,\n  hasAbsoluteHeader,\n  headerHeight,\n  onHeaderHeightChange,\n  isParentHeaderShown,\n  index,\n  layout,\n  onCloseRoute,\n  onOpenRoute,\n  onPageChangeCancel,\n  onPageChangeConfirm,\n  onPageChangeStart,\n  onGestureCancel,\n  onGestureEnd,\n  onGestureStart,\n  onTransitionEnd,\n  onTransitionStart,\n  renderHeader,\n  renderScene,\n  safeAreaInsetBottom,\n  safeAreaInsetLeft,\n  safeAreaInsetRight,\n  safeAreaInsetTop,\n  scene,\n  transitionSpec,\n}: Props) {\n  const handleOpen = () => {\n    const { route } = scene;\n\n    onTransitionEnd?.({ route }, false);\n    onOpenRoute({ route });\n  };\n\n  const handleClose = () => {\n    const { route } = scene;\n\n    onTransitionEnd?.({ route }, true);\n    onCloseRoute({ route });\n  };\n\n  const handleGestureBegin = () => {\n    const { route } = scene;\n\n    onPageChangeStart?.();\n    onGestureStart?.({ route });\n  };\n\n  const handleGestureCanceled = () => {\n    const { route } = scene;\n\n    onPageChangeCancel?.();\n    onGestureCancel?.({ route });\n  };\n\n  const handleGestureEnd = () => {\n    const { route } = scene;\n\n    onGestureEnd?.({ route });\n  };\n\n  const handleTransition = ({\n    closing,\n    gesture,\n  }: {\n    closing: boolean;\n    gesture: boolean;\n  }) => {\n    const { route } = scene;\n\n    if (!gesture) {\n      onPageChangeConfirm?.(true);\n    } else if (active && closing) {\n      onPageChangeConfirm?.(false);\n    } else {\n      onPageChangeCancel?.();\n    }\n\n    onTransitionStart?.({ route }, closing);\n  };\n\n  const insets = {\n    top: safeAreaInsetTop,\n    right: safeAreaInsetRight,\n    bottom: safeAreaInsetBottom,\n    left: safeAreaInsetLeft,\n  };\n\n  const { colors } = useTheme();\n\n  const [pointerEvents, setPointerEvents] = React.useState<'box-none' | 'none'>(\n    'box-none'\n  );\n\n  React.useEffect(() => {\n    // @ts-expect-error: AnimatedInterpolation optionally has addListener, but the type defs don't think so\n    const listener = scene.progress.next?.addListener?.(\n      ({ value }: { value: number }) => {\n        setPointerEvents(value <= EPSILON ? 'box-none' : 'none');\n      }\n    );\n\n    return () => {\n      if (listener) {\n        // @ts-expect-error: AnimatedInterpolation optionally has removedListener, but the type defs don't think so\n        scene.progress.next?.removeListener?.(listener);\n      }\n    };\n  }, [pointerEvents, scene.progress.next]);\n\n  const isCurrentHeaderShown = headerMode !== 'none' && headerShown !== false;\n  const previousScene = getPreviousScene({ route: scene.route });\n\n  return (\n    <Card\n      index={index}\n      gestureDirection={gestureDirection}\n      layout={layout}\n      insets={insets}\n      gesture={gesture}\n      current={scene.progress.current}\n      next={scene.progress.next}\n      closing={closing}\n      onOpen={handleOpen}\n      onClose={handleClose}\n      overlay={cardOverlay}\n      overlayEnabled={cardOverlayEnabled}\n      shadowEnabled={cardShadowEnabled}\n      onTransition={handleTransition}\n      onGestureBegin={handleGestureBegin}\n      onGestureCanceled={handleGestureCanceled}\n      onGestureEnd={handleGestureEnd}\n      gestureEnabled={gestureEnabled}\n      gestureResponseDistance={gestureResponseDistance}\n      gestureVelocityImpact={gestureVelocityImpact}\n      transitionSpec={transitionSpec}\n      styleInterpolator={cardStyleInterpolator}\n      accessibilityElementsHidden={!focused}\n      importantForAccessibility={focused ? 'auto' : 'no-hide-descendants'}\n      pointerEvents={active ? 'box-none' : pointerEvents}\n      pageOverflowEnabled={headerMode === 'screen' && mode === 'card'}\n      containerStyle={hasAbsoluteHeader ? { marginTop: headerHeight } : null}\n      contentStyle={[{ backgroundColor: colors.background }, cardStyle]}\n      style={[\n        {\n          // This is necessary to avoid unfocused larger pages increasing scroll area\n          // The issue can be seen on the web when a smaller screen is pushed over a larger one\n          overflow: active ? undefined : 'hidden',\n        },\n        StyleSheet.absoluteFill,\n      ]}\n    >\n      <View style={styles.container}>\n        <View style={styles.scene}>\n          <PreviousSceneContext.Provider value={previousScene}>\n            <HeaderShownContext.Provider\n              value={isParentHeaderShown || isCurrentHeaderShown}\n            >\n              <HeaderHeightContext.Provider value={headerHeight}>\n                {renderScene({ route: scene.route })}\n              </HeaderHeightContext.Provider>\n            </HeaderShownContext.Provider>\n          </PreviousSceneContext.Provider>\n        </View>\n        {headerMode === 'screen'\n          ? renderHeader({\n              mode: 'screen',\n              layout,\n              insets,\n              scenes: [previousScene, scene],\n              getPreviousScene,\n              getFocusedRoute,\n              gestureDirection,\n              styleInterpolator: headerStyleInterpolator,\n              onContentHeightChange: onHeaderHeightChange,\n            })\n          : null}\n      </View>\n    </Card>\n  );\n}\n\nexport default React.memo(CardContainer);\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'column-reverse',\n  },\n  scene: {\n    flex: 1,\n  },\n});\n"]},"metadata":{},"sourceType":"script"}