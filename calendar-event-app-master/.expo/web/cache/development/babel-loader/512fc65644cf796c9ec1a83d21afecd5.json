{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = useLinking;\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _core = require(\"@react-navigation/core\");\nvar _nonSecure = require(\"nanoid/non-secure\");\nvar _ServerContext = _interopRequireDefault(require(\"./ServerContext\"));\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\nvar createMemoryHistory = function createMemoryHistory() {\n  var index = 0;\n  var items = [];\n  var pending = [];\n  var interrupt = function interrupt() {\n    pending.forEach(function (it) {\n      var cb = it.cb;\n      it.cb = function () {\n        return cb(true);\n      };\n    });\n  };\n  var history = {\n    get index() {\n      var _window$history$state;\n      var id = (_window$history$state = window.history.state) === null || _window$history$state === void 0 ? void 0 : _window$history$state.id;\n      if (id) {\n        var _index = items.findIndex(function (item) {\n          return item.id === id;\n        });\n        return _index > -1 ? _index : 0;\n      }\n      return 0;\n    },\n    get: function get(index) {\n      return items[index];\n    },\n    backIndex: function backIndex(_ref) {\n      var path = _ref.path;\n      for (var i = index - 1; i >= 0; i--) {\n        var item = items[i];\n        if (item.path === path) {\n          return i;\n        }\n      }\n      return -1;\n    },\n    push: function push(_ref2) {\n      var path = _ref2.path,\n        state = _ref2.state;\n      interrupt();\n      var id = (0, _nonSecure.nanoid)();\n      items = items.slice(0, index + 1);\n      items.push({\n        path: path,\n        state: state,\n        id: id\n      });\n      index = items.length - 1;\n      window.history.pushState({\n        id: id\n      }, '', path);\n    },\n    replace: function replace(_ref3) {\n      var path = _ref3.path,\n        state = _ref3.state;\n      var _window$history$state2, _window$history$state3;\n      interrupt();\n      var id = (_window$history$state2 = (_window$history$state3 = window.history.state) === null || _window$history$state3 === void 0 ? void 0 : _window$history$state3.id) !== null && _window$history$state2 !== void 0 ? _window$history$state2 : (0, _nonSecure.nanoid)();\n      if (items.length) {\n        items[index] = {\n          path: path,\n          state: state,\n          id: id\n        };\n      } else {\n        items.push({\n          path: path,\n          state: state,\n          id: id\n        });\n      }\n      window.history.replaceState({\n        id: id\n      }, '', path);\n    },\n    go: function go(n) {\n      interrupt();\n      if (n > 0) {\n        n = Math.min(n, items.length - 1);\n      } else if (n < 0) {\n        n = index + n < 0 ? -index : n;\n      }\n      if (n === 0) {\n        return;\n      }\n      index += n;\n      return new Promise(function (resolve, reject) {\n        var done = function done(interrupted) {\n          clearTimeout(timer);\n          if (interrupted) {\n            reject(new Error('History was changed during navigation.'));\n            return;\n          }\n          var title = window.document.title;\n          window.document.title = '';\n          window.document.title = title;\n          resolve();\n        };\n        pending.push({\n          ref: done,\n          cb: done\n        });\n        var timer = setTimeout(function () {\n          var index = pending.findIndex(function (it) {\n            return it.ref === done;\n          });\n          if (index > -1) {\n            pending[index].cb();\n            pending.splice(index, 1);\n          }\n        }, 100);\n        var onPopState = function onPopState() {\n          var last = pending.pop();\n          window.removeEventListener('popstate', onPopState);\n          last === null || last === void 0 ? void 0 : last.cb();\n        };\n        window.addEventListener('popstate', onPopState);\n        window.history.go(n);\n      });\n    },\n    listen: function listen(listener) {\n      var onPopState = function onPopState() {\n        if (pending.length) {\n          return;\n        }\n        listener();\n      };\n      window.addEventListener('popstate', onPopState);\n      return function () {\n        return window.removeEventListener('popstate', onPopState);\n      };\n    }\n  };\n  return history;\n};\nvar findMatchingState = function findMatchingState(a, b) {\n  if (a === undefined || b === undefined || a.key !== b.key) {\n    return [undefined, undefined];\n  }\n  var aHistoryLength = a.history ? a.history.length : a.routes.length;\n  var bHistoryLength = b.history ? b.history.length : b.routes.length;\n  var aRoute = a.routes[a.index];\n  var bRoute = b.routes[b.index];\n  var aChildState = aRoute.state;\n  var bChildState = bRoute.state;\n  if (aHistoryLength !== bHistoryLength || aRoute.key !== bRoute.key || aChildState === undefined || bChildState === undefined || aChildState.key !== bChildState.key) {\n    return [a, b];\n  }\n  return findMatchingState(aChildState, bChildState);\n};\nvar series = function series(cb) {\n  var handling = false;\n  var queue = [];\n  var callback = function _callee() {\n    var last;\n    return _regenerator.default.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            if (!handling) {\n              _context.next = 4;\n              break;\n            }\n            queue.unshift(callback);\n            return _context.abrupt(\"return\");\n          case 4:\n            handling = true;\n            _context.next = 7;\n            return _regenerator.default.awrap(cb());\n          case 7:\n            _context.prev = 7;\n            handling = false;\n            if (queue.length) {\n              last = queue.pop();\n              last === null || last === void 0 ? void 0 : last();\n            }\n            return _context.finish(7);\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0,, 7, 11]], Promise);\n  };\n  return callback;\n};\nvar isUsingLinking = false;\nfunction useLinking(ref, _ref4) {\n  var _ref4$enabled = _ref4.enabled,\n    enabled = _ref4$enabled === void 0 ? true : _ref4$enabled,\n    config = _ref4.config,\n    _ref4$getStateFromPat = _ref4.getStateFromPath,\n    getStateFromPath = _ref4$getStateFromPat === void 0 ? _core.getStateFromPath : _ref4$getStateFromPat,\n    _ref4$getPathFromStat = _ref4.getPathFromState,\n    getPathFromState = _ref4$getPathFromStat === void 0 ? _core.getPathFromState : _ref4$getPathFromStat,\n    _ref4$getActionFromSt = _ref4.getActionFromState,\n    getActionFromState = _ref4$getActionFromSt === void 0 ? _core.getActionFromState : _ref4$getActionFromSt;\n  React.useEffect(function () {\n    if (enabled !== false && isUsingLinking) {\n      throw new Error(['Looks like you have configured linking in multiple places. This is likely an error since URL integration should only be handled in one place to avoid conflicts. Make sure that:', \"- You are not using both 'linking' prop and 'useLinking'\", \"- You don't have 'useLinking' in multiple components\"].join('\\n').trim());\n    } else {\n      isUsingLinking = enabled !== false;\n    }\n    return function () {\n      isUsingLinking = false;\n    };\n  });\n  var _React$useState = React.useState(createMemoryHistory),\n    _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 1),\n    history = _React$useState2[0];\n  var enabledRef = React.useRef(enabled);\n  var configRef = React.useRef(config);\n  var getStateFromPathRef = React.useRef(getStateFromPath);\n  var getActionFromStateRef = React.useRef(getActionFromState);\n  var getPathFromStateRef = React.useRef(getPathFromState);\n  React.useEffect(function () {\n    enabledRef.current = enabled;\n    configRef.current = config;\n    getStateFromPathRef.current = getStateFromPath;\n    getActionFromStateRef.current = getActionFromState;\n    getPathFromStateRef.current = getPathFromState;\n  });\n  var server = React.useContext(_ServerContext.default);\n  var getInitialState = React.useCallback(function () {\n    var value;\n    if (enabledRef.current) {\n      var _server$location;\n      var _location = (_server$location = server === null || server === void 0 ? void 0 : server.location) !== null && _server$location !== void 0 ? _server$location : typeof window !== 'undefined' ? window.location : undefined;\n      var path = _location ? _location.pathname + _location.search : undefined;\n      if (path) {\n        value = getStateFromPathRef.current(path, configRef.current);\n      }\n    }\n    var thenable = {\n      then: function then(onfulfilled) {\n        return Promise.resolve(onfulfilled ? onfulfilled(value) : value);\n      },\n      catch: function _catch() {\n        return thenable;\n      }\n    };\n    return thenable;\n  }, []);\n  var previousIndexRef = React.useRef(undefined);\n  var previousStateRef = React.useRef(undefined);\n  var pendingPopStatePathRef = React.useRef(undefined);\n  React.useEffect(function () {\n    previousIndexRef.current = history.index;\n    return history.listen(function () {\n      var _previousIndexRef$cur;\n      var navigation = ref.current;\n      if (!navigation || !enabled) {\n        return;\n      }\n      var path = location.pathname + location.search;\n      var index = history.index;\n      var previousIndex = (_previousIndexRef$cur = previousIndexRef.current) !== null && _previousIndexRef$cur !== void 0 ? _previousIndexRef$cur : 0;\n      previousIndexRef.current = index;\n      pendingPopStatePathRef.current = path;\n      var record = history.get(index);\n      if ((record === null || record === void 0 ? void 0 : record.path) === path && record !== null && record !== void 0 && record.state) {\n        navigation.resetRoot(record.state);\n        return;\n      }\n      var state = getStateFromPathRef.current(path, configRef.current);\n      if (state) {\n        var rootState = navigation.getRootState();\n        if (state.routes.some(function (r) {\n          return !(rootState !== null && rootState !== void 0 && rootState.routeNames.includes(r.name));\n        })) {\n          return;\n        }\n        if (index > previousIndex) {\n          var action = getActionFromStateRef.current(state, configRef.current);\n          if (action !== undefined) {\n            try {\n              navigation.dispatch(action);\n            } catch (e) {}\n          } else {\n            navigation.resetRoot(state);\n          }\n        } else {\n          navigation.resetRoot(state);\n        }\n      } else {\n        navigation.resetRoot(state);\n      }\n    });\n  }, [enabled, history, ref]);\n  React.useEffect(function () {\n    var _ref$current;\n    if (!enabled) {\n      return;\n    }\n    if (ref.current) {\n      var state = ref.current.getRootState();\n      if (state) {\n        var path = getPathFromStateRef.current(state, configRef.current);\n        if (previousStateRef.current === undefined) {\n          previousStateRef.current = state;\n        }\n        history.replace({\n          path: path,\n          state: state\n        });\n      }\n    }\n    var onStateChange = function _callee2() {\n      var navigation, previousState, state, pendingPath, path, _findMatchingState, _findMatchingState2, previousFocusedState, focusedState, historyDelta, nextIndex, currentIndex;\n      return _regenerator.default.async(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              navigation = ref.current;\n              if (!(!navigation || !enabled)) {\n                _context2.next = 3;\n                break;\n              }\n              return _context2.abrupt(\"return\");\n            case 3:\n              previousState = previousStateRef.current;\n              state = navigation.getRootState();\n              pendingPath = pendingPopStatePathRef.current;\n              path = getPathFromStateRef.current(state, configRef.current);\n              previousStateRef.current = state;\n              pendingPopStatePathRef.current = undefined;\n              _findMatchingState = findMatchingState(previousState, state), _findMatchingState2 = (0, _slicedToArray2.default)(_findMatchingState, 2), previousFocusedState = _findMatchingState2[0], focusedState = _findMatchingState2[1];\n              if (!(previousFocusedState && focusedState && path !== pendingPath)) {\n                _context2.next = 37;\n                break;\n              }\n              historyDelta = (focusedState.history ? focusedState.history.length : focusedState.routes.length) - (previousFocusedState.history ? previousFocusedState.history.length : previousFocusedState.routes.length);\n              if (!(historyDelta > 0)) {\n                _context2.next = 16;\n                break;\n              }\n              history.push({\n                path: path,\n                state: state\n              });\n              _context2.next = 35;\n              break;\n            case 16:\n              if (!(historyDelta < 0)) {\n                _context2.next = 34;\n                break;\n              }\n              nextIndex = history.backIndex({\n                path: path\n              });\n              currentIndex = history.index;\n              _context2.prev = 19;\n              if (!(nextIndex !== -1 && nextIndex < currentIndex)) {\n                _context2.next = 25;\n                break;\n              }\n              _context2.next = 23;\n              return _regenerator.default.awrap(history.go(nextIndex - currentIndex));\n            case 23:\n              _context2.next = 27;\n              break;\n            case 25:\n              _context2.next = 27;\n              return _regenerator.default.awrap(history.go(historyDelta));\n            case 27:\n              history.replace({\n                path: path,\n                state: state\n              });\n              _context2.next = 32;\n              break;\n            case 30:\n              _context2.prev = 30;\n              _context2.t0 = _context2[\"catch\"](19);\n            case 32:\n              _context2.next = 35;\n              break;\n            case 34:\n              history.replace({\n                path: path,\n                state: state\n              });\n            case 35:\n              _context2.next = 38;\n              break;\n            case 37:\n              history.replace({\n                path: path,\n                state: state\n              });\n            case 38:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, [[19, 30]], Promise);\n    };\n    return (_ref$current = ref.current) === null || _ref$current === void 0 ? void 0 : _ref$current.addListener('state', series(onStateChange));\n  });\n  return {\n    getInitialState: getInitialState\n  };\n}","map":{"version":3,"mappings":"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","names":["createMemoryHistory","index","items","pending","interrupt","forEach","it","cb","history","id","window","state","_window$history$state","findIndex","item","get","backIndex","path","i","push","nanoid","slice","length","pushState","replace","_window$history$state3","replaceState","go","n","Math","min","Promise","resolve","reject","done","interrupted","clearTimeout","timer","Error","title","document","ref","setTimeout","splice","onPopState","last","pop","removeEventListener","addEventListener","listen","listener","findMatchingState","a","b","undefined","key","aHistoryLength","routes","bHistoryLength","aRoute","bRoute","aChildState","bChildState","series","handling","queue","callback","unshift","isUsingLinking","useLinking","enabled","config","getStateFromPath","getStateFromPathDefault","getPathFromState","getPathFromStateDefault","getActionFromState","getActionFromStateDefault","React","useEffect","join","trim","useState","enabledRef","useRef","configRef","getStateFromPathRef","getActionFromStateRef","getPathFromStateRef","current","server","useContext","ServerContext","getInitialState","useCallback","value","location","pathname","search","thenable","then","onfulfilled","catch","previousIndexRef","previousStateRef","pendingPopStatePathRef","navigation","previousIndex","record","resetRoot","rootState","getRootState","some","r","routeNames","includes","name","action","dispatch","e","onStateChange","previousState","pendingPath","previousFocusedState","focusedState","historyDelta","nextIndex","currentIndex","_ref$current","addListener"],"sources":["useLinking.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  getStateFromPath as getStateFromPathDefault,\n  getPathFromState as getPathFromStateDefault,\n  getActionFromState as getActionFromStateDefault,\n  NavigationContainerRef,\n  NavigationState,\n} from '@react-navigation/core';\nimport { nanoid } from 'nanoid/non-secure';\nimport ServerContext from './ServerContext';\nimport type { LinkingOptions } from './types';\n\ntype ResultState = ReturnType<typeof getStateFromPathDefault>;\n\ntype HistoryRecord = {\n  // Unique identifier for this record to match it with window.history.state\n  id: string;\n  // Navigation state object for the history entry\n  state: NavigationState;\n  // Path of the history entry\n  path: string;\n};\n\nconst createMemoryHistory = () => {\n  let index = 0;\n  let items: HistoryRecord[] = [];\n\n  // Pending callbacks for `history.go(n)`\n  // We might modify the callback stored if it was interrupted, so we have a ref to identify it\n  const pending: { ref: unknown; cb: (interrupted?: boolean) => void }[] = [];\n\n  const interrupt = () => {\n    // If another history operation was performed we need to interrupt existing ones\n    // This makes sure that calls such as `history.replace` after `history.go` don't happen\n    // Since otherwise it won't be correct if something else has changed\n    pending.forEach((it) => {\n      const cb = it.cb;\n      it.cb = () => cb(true);\n    });\n  };\n\n  const history = {\n    get index(): number {\n      // We store an id in the state instead of an index\n      // Index could get out of sync with in-memory values if page reloads\n      const id = window.history.state?.id;\n\n      if (id) {\n        const index = items.findIndex((item) => item.id === id);\n\n        return index > -1 ? index : 0;\n      }\n\n      return 0;\n    },\n\n    get(index: number) {\n      return items[index];\n    },\n\n    backIndex({ path }: { path: string }) {\n      // We need to find the index from the element before current to get closest path to go back to\n      for (let i = index - 1; i >= 0; i--) {\n        const item = items[i];\n\n        if (item.path === path) {\n          return i;\n        }\n      }\n\n      return -1;\n    },\n\n    push({ path, state }: { path: string; state: NavigationState }) {\n      interrupt();\n\n      const id = nanoid();\n\n      // When a new entry is pushed, all the existing entries after index will be inaccessible\n      // So we remove any existing entries after the current index to clean them up\n      items = items.slice(0, index + 1);\n\n      items.push({ path, state, id });\n      index = items.length - 1;\n\n      // We pass empty string for title because it's ignored in all browsers except safari\n      // We don't store state object in history.state because:\n      // - browsers have limits on how big it can be, and we don't control the size\n      // - while not recommended, there could be non-serializable data in state\n      window.history.pushState({ id }, '', path);\n    },\n\n    replace({ path, state }: { path: string; state: NavigationState }) {\n      interrupt();\n\n      const id = window.history.state?.id ?? nanoid();\n\n      if (items.length) {\n        items[index] = { path, state, id };\n      } else {\n        // This is the first time any state modifications are done\n        // So we need to push the entry as there's nothing to replace\n        items.push({ path, state, id });\n      }\n\n      window.history.replaceState({ id }, '', path);\n    },\n\n    // `history.go(n)` is asynchronous, there are couple of things to keep in mind:\n    // - it won't do anything if we can't go `n` steps, the `popstate` event won't fire.\n    // - each `history.go(n)` call will trigger a separate `popstate` event with correct location.\n    // - the `popstate` event fires before the next frame after calling `history.go(n)`.\n    // This method differs from `history.go(n)` in the sense that it'll go back as many steps it can.\n    go(n: number) {\n      interrupt();\n\n      if (n > 0) {\n        // We shouldn't go forward more than available index\n        n = Math.min(n, items.length - 1);\n      } else if (n < 0) {\n        // We shouldn't go back more than the 0 index\n        // Otherwise we'll exit the page\n        n = index + n < 0 ? -index : n;\n      }\n\n      if (n === 0) {\n        return;\n      }\n\n      index += n;\n\n      // When we call `history.go`, `popstate` will fire when there's history to go back to\n      // So we need to somehow handle following cases:\n      // - There's history to go back, `history.go` is called, and `popstate` fires\n      // - `history.go` is called multiple times, we need to resolve on respective `popstate`\n      // - No history to go back, but `history.go` was called, browser has no API to detect it\n      return new Promise<void>((resolve, reject) => {\n        const done = (interrupted?: boolean) => {\n          clearTimeout(timer);\n\n          if (interrupted) {\n            reject(new Error('History was changed during navigation.'));\n            return;\n          }\n\n          // There seems to be a bug in Chrome regarding updating the title\n          // If we set a title just before calling `history.go`, the title gets lost\n          // However the value of `document.title` is still what we set it to\n          // It's just not displayed in the tab bar\n          // To update the tab bar, we need to reset the title to something else first (e.g. '')\n          // And set the title to what it was before so it gets applied\n          // It won't work without setting it to empty string coz otherwise title isn't changing\n          // Which means that the browser won't do anything after setting the title\n          const { title } = window.document;\n\n          window.document.title = '';\n          window.document.title = title;\n\n          resolve();\n        };\n\n        pending.push({ ref: done, cb: done });\n\n        // If navigation didn't happen within 100ms, assume that it won't happen\n        // This may not be accurate, but hopefully it won't take so much time\n        // In Chrome, navigation seems to happen instantly in next microtask\n        // But on Firefox, it seems to take much longer, around 50ms from our testing\n        // We're using a hacky timeout since there doesn't seem to be way to know for sure\n        const timer = setTimeout(() => {\n          const index = pending.findIndex((it) => it.ref === done);\n\n          if (index > -1) {\n            pending[index].cb();\n            pending.splice(index, 1);\n          }\n        }, 100);\n\n        const onPopState = () => {\n          const last = pending.pop();\n\n          window.removeEventListener('popstate', onPopState);\n          last?.cb();\n        };\n\n        window.addEventListener('popstate', onPopState);\n        window.history.go(n);\n      });\n    },\n\n    // The `popstate` event is triggered when history changes, except `pushState` and `replaceState`\n    // If we call `history.go(n)` ourselves, we don't want it to trigger the listener\n    // Here we normalize it so that only external changes (e.g. user pressing back/forward) trigger the listener\n    listen(listener: () => void) {\n      const onPopState = () => {\n        if (pending.length) {\n          // This was triggered by `history.go(n)`, we shouldn't call the listener\n          return;\n        }\n\n        listener();\n      };\n\n      window.addEventListener('popstate', onPopState);\n\n      return () => window.removeEventListener('popstate', onPopState);\n    },\n  };\n\n  return history;\n};\n\n/**\n * Find the matching navigation state that changed between 2 navigation states\n * e.g.: a -> b -> c -> d and a -> b -> c -> e -> f, if history in b changed, b is the matching state\n */\nconst findMatchingState = <T extends NavigationState>(\n  a: T | undefined,\n  b: T | undefined\n): [T | undefined, T | undefined] => {\n  if (a === undefined || b === undefined || a.key !== b.key) {\n    return [undefined, undefined];\n  }\n\n  // Tab and drawer will have `history` property, but stack will have history in `routes`\n  const aHistoryLength = a.history ? a.history.length : a.routes.length;\n  const bHistoryLength = b.history ? b.history.length : b.routes.length;\n\n  const aRoute = a.routes[a.index];\n  const bRoute = b.routes[b.index];\n\n  const aChildState = aRoute.state as T | undefined;\n  const bChildState = bRoute.state as T | undefined;\n\n  // Stop here if this is the state object that changed:\n  // - history length is different\n  // - focused routes are different\n  // - one of them doesn't have child state\n  // - child state keys are different\n  if (\n    aHistoryLength !== bHistoryLength ||\n    aRoute.key !== bRoute.key ||\n    aChildState === undefined ||\n    bChildState === undefined ||\n    aChildState.key !== bChildState.key\n  ) {\n    return [a, b];\n  }\n\n  return findMatchingState(aChildState, bChildState);\n};\n\n/**\n * Run async function in series as it's called.\n */\nconst series = (cb: () => Promise<void>) => {\n  // Whether we're currently handling a callback\n  let handling = false;\n  let queue: (() => Promise<void>)[] = [];\n\n  const callback = async () => {\n    try {\n      if (handling) {\n        // If we're currently handling a previous event, wait before handling this one\n        // Add the callback to the beginning of the queue\n        queue.unshift(callback);\n        return;\n      }\n\n      handling = true;\n\n      await cb();\n    } finally {\n      handling = false;\n\n      if (queue.length) {\n        // If we have queued items, handle the last one\n        const last = queue.pop();\n\n        last?.();\n      }\n    }\n  };\n\n  return callback;\n};\n\nlet isUsingLinking = false;\n\nexport default function useLinking(\n  ref: React.RefObject<NavigationContainerRef>,\n  {\n    enabled = true,\n    config,\n    getStateFromPath = getStateFromPathDefault,\n    getPathFromState = getPathFromStateDefault,\n    getActionFromState = getActionFromStateDefault,\n  }: LinkingOptions\n) {\n  React.useEffect(() => {\n    if (enabled !== false && isUsingLinking) {\n      throw new Error(\n        [\n          'Looks like you have configured linking in multiple places. This is likely an error since URL integration should only be handled in one place to avoid conflicts. Make sure that:',\n          \"- You are not using both 'linking' prop and 'useLinking'\",\n          \"- You don't have 'useLinking' in multiple components\",\n        ]\n          .join('\\n')\n          .trim()\n      );\n    } else {\n      isUsingLinking = enabled !== false;\n    }\n\n    return () => {\n      isUsingLinking = false;\n    };\n  });\n\n  const [history] = React.useState(createMemoryHistory);\n\n  // We store these options in ref to avoid re-creating getInitialState and re-subscribing listeners\n  // This lets user avoid wrapping the items in `React.useCallback` or `React.useMemo`\n  // Not re-creating `getInitialState` is important coz it makes it easier for the user to use in an effect\n  const enabledRef = React.useRef(enabled);\n  const configRef = React.useRef(config);\n  const getStateFromPathRef = React.useRef(getStateFromPath);\n  const getActionFromStateRef = React.useRef(getActionFromState);\n  const getPathFromStateRef = React.useRef(getPathFromState);\n\n  React.useEffect(() => {\n    enabledRef.current = enabled;\n    configRef.current = config;\n    getStateFromPathRef.current = getStateFromPath;\n    getActionFromStateRef.current = getActionFromState;\n    getPathFromStateRef.current = getPathFromState;\n  });\n\n  const server = React.useContext(ServerContext);\n\n  const getInitialState = React.useCallback(() => {\n    let value: ResultState | undefined;\n\n    if (enabledRef.current) {\n      const location =\n        server?.location ??\n        (typeof window !== 'undefined' ? window.location : undefined);\n\n      const path = location ? location.pathname + location.search : undefined;\n\n      if (path) {\n        value = getStateFromPathRef.current(path, configRef.current);\n      }\n    }\n\n    const thenable = {\n      then(onfulfilled?: (state: ResultState | undefined) => void) {\n        return Promise.resolve(onfulfilled ? onfulfilled(value) : value);\n      },\n      catch() {\n        return thenable;\n      },\n    };\n\n    return thenable as PromiseLike<ResultState | undefined>;\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const previousIndexRef = React.useRef<number | undefined>(undefined);\n  const previousStateRef = React.useRef<NavigationState | undefined>(undefined);\n  const pendingPopStatePathRef = React.useRef<string | undefined>(undefined);\n\n  React.useEffect(() => {\n    previousIndexRef.current = history.index;\n\n    return history.listen(() => {\n      const navigation = ref.current;\n\n      if (!navigation || !enabled) {\n        return;\n      }\n\n      const path = location.pathname + location.search;\n      const index = history.index;\n\n      const previousIndex = previousIndexRef.current ?? 0;\n\n      previousIndexRef.current = index;\n      pendingPopStatePathRef.current = path;\n\n      // When browser back/forward is clicked, we first need to check if state object for this index exists\n      // If it does we'll reset to that state object\n      // Otherwise, we'll handle it like a regular deep link\n      const record = history.get(index);\n\n      if (record?.path === path && record?.state) {\n        navigation.resetRoot(record.state);\n        return;\n      }\n\n      const state = getStateFromPathRef.current(path, configRef.current);\n\n      // We should only dispatch an action when going forward\n      // Otherwise the action will likely add items to history, which would mess things up\n      if (state) {\n        // Make sure that the routes in the state exist in the root navigator\n        // Otherwise there's an error in the linking configuration\n        const rootState = navigation.getRootState();\n\n        if (state.routes.some((r) => !rootState?.routeNames.includes(r.name))) {\n          console.warn(\n            \"The navigation state parsed from the URL contains routes not present in the root navigator. This usually means that the linking configuration doesn't match the navigation structure. See https://reactnavigation.org/docs/configuring-links for more details on how to specify a linking configuration.\"\n          );\n          return;\n        }\n\n        if (index > previousIndex) {\n          const action = getActionFromStateRef.current(\n            state,\n            configRef.current\n          );\n\n          if (action !== undefined) {\n            try {\n              navigation.dispatch(action);\n            } catch (e) {\n              // Ignore any errors from deep linking.\n              // This could happen in case of malformed links, navigation object not being initialized etc.\n              console.warn(\n                `An error occurred when trying to handle the link '${path}': ${e.message}`\n              );\n            }\n          } else {\n            navigation.resetRoot(state);\n          }\n        } else {\n          navigation.resetRoot(state);\n        }\n      } else {\n        // if current path didn't return any state, we should revert to initial state\n        navigation.resetRoot(state);\n      }\n    });\n  }, [enabled, history, ref]);\n\n  React.useEffect(() => {\n    if (!enabled) {\n      return;\n    }\n\n    if (ref.current) {\n      // We need to record the current metadata on the first render if they aren't set\n      // This will allow the initial state to be in the history entry\n      const state = ref.current.getRootState();\n\n      if (state) {\n        const path = getPathFromStateRef.current(state, configRef.current);\n\n        if (previousStateRef.current === undefined) {\n          previousStateRef.current = state;\n        }\n\n        history.replace({ path, state });\n      }\n    }\n\n    const onStateChange = async () => {\n      const navigation = ref.current;\n\n      if (!navigation || !enabled) {\n        return;\n      }\n\n      const previousState = previousStateRef.current;\n      const state = navigation.getRootState();\n\n      const pendingPath = pendingPopStatePathRef.current;\n      const path = getPathFromStateRef.current(state, configRef.current);\n\n      previousStateRef.current = state;\n      pendingPopStatePathRef.current = undefined;\n\n      // To detect the kind of state change, we need to:\n      // - Find the common focused navigation state in previous and current state\n      // - If only the route keys changed, compare history/routes.length to check if we go back/forward/replace\n      // - If no common focused navigation state found, it's a replace\n      const [previousFocusedState, focusedState] = findMatchingState(\n        previousState,\n        state\n      );\n\n      if (\n        previousFocusedState &&\n        focusedState &&\n        // We should only handle push/pop if path changed from what was in last `popstate`\n        // Otherwise it's likely a change triggered by `popstate`\n        path !== pendingPath\n      ) {\n        const historyDelta =\n          (focusedState.history\n            ? focusedState.history.length\n            : focusedState.routes.length) -\n          (previousFocusedState.history\n            ? previousFocusedState.history.length\n            : previousFocusedState.routes.length);\n\n        if (historyDelta > 0) {\n          // If history length is increased, we should pushState\n          // Note that path might not actually change here, for example, drawer open should pushState\n          history.push({ path, state });\n        } else if (historyDelta < 0) {\n          // If history length is decreased, i.e. entries were removed, we want to go back\n\n          const nextIndex = history.backIndex({ path });\n          const currentIndex = history.index;\n\n          try {\n            if (nextIndex !== -1 && nextIndex < currentIndex) {\n              // An existing entry for this path exists and it's less than current index, go back to that\n              await history.go(nextIndex - currentIndex);\n            } else {\n              // We couldn't find an existing entry to go back to, so we'll go back by the delta\n              // This won't be correct if multiple routes were pushed in one go before\n              // Usually this shouldn't happen and this is a fallback for that\n              await history.go(historyDelta);\n            }\n\n            // Store the updated state as well as fix the path if incorrect\n            history.replace({ path, state });\n          } catch (e) {\n            // The navigation was interrupted\n          }\n        } else {\n          // If history length is unchanged, we want to replaceState\n          history.replace({ path, state });\n        }\n      } else {\n        // If no common navigation state was found, assume it's a replace\n        // This would happen if the user did a reset/conditionally changed navigators\n        history.replace({ path, state });\n      }\n    };\n\n    // We debounce onStateChange coz we don't want multiple state changes to be handled at one time\n    // This could happen since `history.go(n)` is asynchronous\n    // If `pushState` or `replaceState` were called before `history.go(n)` completes, it'll mess stuff up\n    return ref.current?.addListener('state', series(onStateChange));\n  });\n\n  return {\n    getInitialState,\n  };\n}\n"]},"metadata":{},"sourceType":"script"}