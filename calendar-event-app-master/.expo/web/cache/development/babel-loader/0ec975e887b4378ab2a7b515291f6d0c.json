{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ExpoKeepAwakeTag = void 0;\nexports.activateKeepAwake = activateKeepAwake;\nexports.deactivateKeepAwake = deactivateKeepAwake;\nexports.useKeepAwake = useKeepAwake;\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\nvar _react = require(\"react\");\nvar _ExpoKeepAwake = _interopRequireDefault(require(\"./ExpoKeepAwake\"));\nvar ExpoKeepAwakeTag = 'ExpoKeepAwakeDefaultTag';\nexports.ExpoKeepAwakeTag = ExpoKeepAwakeTag;\nfunction useKeepAwake() {\n  var tag = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ExpoKeepAwakeTag;\n  var options = arguments.length > 1 ? arguments[1] : undefined;\n  (0, _react.useEffect)(function () {\n    activateKeepAwake(tag);\n    return function () {\n      if (options != null && options.suppressDeactivateWarnings) {\n        deactivateKeepAwake(tag).catch(function () {});\n      } else {\n        deactivateKeepAwake(tag);\n      }\n    };\n  }, [tag]);\n}\nfunction activateKeepAwake() {\n  var tag,\n    _args = arguments;\n  return _regenerator.default.async(function activateKeepAwake$(_context) {\n    while (1) switch (_context.prev = _context.next) {\n      case 0:\n        tag = _args.length > 0 && _args[0] !== undefined ? _args[0] : ExpoKeepAwakeTag;\n        _context.next = 3;\n        return _regenerator.default.awrap(_ExpoKeepAwake.default.activate == null ? void 0 : _ExpoKeepAwake.default.activate(tag));\n      case 3:\n      case \"end\":\n        return _context.stop();\n    }\n  }, null, null, null, Promise);\n}\nfunction deactivateKeepAwake() {\n  var tag,\n    _args2 = arguments;\n  return _regenerator.default.async(function deactivateKeepAwake$(_context2) {\n    while (1) switch (_context2.prev = _context2.next) {\n      case 0:\n        tag = _args2.length > 0 && _args2[0] !== undefined ? _args2[0] : ExpoKeepAwakeTag;\n        _context2.next = 3;\n        return _regenerator.default.awrap(_ExpoKeepAwake.default.deactivate == null ? void 0 : _ExpoKeepAwake.default.deactivate(tag));\n      case 3:\n      case \"end\":\n        return _context2.stop();\n    }\n  }, null, null, null, Promise);\n}","map":{"version":3,"sources":["../src/index.ts"],"names":[],"mappings":";;;;;;;;;AAAA;AAEA;AAEO,IAAM,gBAAgB,GAAG,yBAAyB;AAAC;AAgBpD,SAAU,YAAY,GAIzB;EAAA,IAHD,GAAA,uEAAc,gBAAgB;EAAA,IAC9B,OAEC;EAED,IAAA,gBAAS,EAAC,YAAK;IACb,iBAAiB,CAAC,GAAG,CAAC;IACtB,OAAO,YAAK;MACV,IAAI,OAAO,YAAP,OAAO,CAAE,0BAA0B,EAAE;QACvC,mBAAmB,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,YAAK,CAAE,CAAC,CAAC;OACzC,MAAM;QACL,mBAAmB,CAAC,GAAG,CAAC;MACzB;IACH,CAAC;EACH,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;AACX;AAYO,SAAe,iBAAiB;EAAA;IAAA;EAAA;IAAA;MAAA;QAAC,GAAA,2DAAc,gBAAgB;QAAA;QAAA,kCAC9D,sBAAa,CAAC,QAAQ,oBAAtB,sBAAa,CAAC,QAAQ,CAAG,GAAG,CAAC;MAAA;MAAA;QAAA;IAAA;EAAA;AAAA;AAU9B,SAAe,mBAAmB;EAAA;IAAA;EAAA;IAAA;MAAA;QAAC,GAAA,8DAAc,gBAAgB;QAAA;QAAA,kCAChE,sBAAa,CAAC,UAAU,oBAAxB,sBAAa,CAAC,UAAU,CAAG,GAAG,CAAC;MAAA;MAAA;QAAA;IAAA;EAAA;AAAA","sourcesContent":["import { useEffect } from 'react';\n\nimport ExpoKeepAwake from './ExpoKeepAwake';\n\nexport const ExpoKeepAwakeTag = 'ExpoKeepAwakeDefaultTag';\n\n// @needsAudit\n/**\n * A React hook to keep the screen awake for as long as the owner component is mounted.\n * The optionally provided `tag` argument is used when activating and deactivating the keep-awake\n * feature. If unspecified, the default `tag` is used. See the documentation for `activateKeepAwake`\n * below to learn more about the `tag` argument.\n *\n * @param tag *Optional* - Tag to lock screen sleep prevention. If not provided, the default tag is used.\n * @param options *Optional*\n *   - `suppressDeactivateWarnings` *Optional* -\n *      The call will throw an unhandled promise rejection on Android\n *      when the original Activity is dead or deactivated.\n *      Set the value to true for suppressing the uncaught exception.\n */\nexport function useKeepAwake(\n  tag: string = ExpoKeepAwakeTag,\n  options?: {\n    suppressDeactivateWarnings: boolean;\n  }\n): void {\n  useEffect(() => {\n    activateKeepAwake(tag);\n    return () => {\n      if (options?.suppressDeactivateWarnings) {\n        deactivateKeepAwake(tag).catch(() => {});\n      } else {\n        deactivateKeepAwake(tag);\n      }\n    };\n  }, [tag]);\n}\n\n// @needsAudit\n/**\n * Prevents the screen from sleeping until `deactivateKeepAwake` is called with the same `tag` value.\n *\n * If the `tag` argument is specified, the screen will not sleep until you call `deactivateKeepAwake`\n * with the same `tag` argument. When using multiple `tags` for activation you'll have to deactivate\n * each one in order to re-enable screen sleep. If tag is unspecified, the default `tag` is used.\n * @param tag *Optional* - Tag to lock screen sleep prevention. If not provided, the default tag is used.\n */\n\nexport async function activateKeepAwake(tag: string = ExpoKeepAwakeTag): Promise<void> {\n  await ExpoKeepAwake.activate?.(tag);\n}\n\n// @needsAudit\n/**\n * Releases the lock on screen-sleep prevention associated with the given `tag` value. If `tag`\n * is unspecified, it defaults to the same default tag that `activateKeepAwake` uses.\n * @param tag *Optional* - Tag to release the lock on screen sleep prevention. If not provided,\n * the default tag is used.\n */\nexport async function deactivateKeepAwake(tag: string = ExpoKeepAwakeTag): Promise<void> {\n  await ExpoKeepAwake.deactivate?.(tag);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}