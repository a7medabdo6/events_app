{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isAvailableAsync = isAvailableAsync;\nexports.getCalendarsAsync = getCalendarsAsync;\nexports.createCalendarAsync = createCalendarAsync;\nexports.updateCalendarAsync = updateCalendarAsync;\nexports.deleteCalendarAsync = deleteCalendarAsync;\nexports.getEventsAsync = getEventsAsync;\nexports.getEventAsync = getEventAsync;\nexports.createEventAsync = createEventAsync;\nexports.updateEventAsync = updateEventAsync;\nexports.deleteEventAsync = deleteEventAsync;\nexports.getAttendeesForEventAsync = getAttendeesForEventAsync;\nexports.createAttendeeAsync = createAttendeeAsync;\nexports.updateAttendeeAsync = updateAttendeeAsync;\nexports.getDefaultCalendarAsync = getDefaultCalendarAsync;\nexports.deleteAttendeeAsync = deleteAttendeeAsync;\nexports.getRemindersAsync = getRemindersAsync;\nexports.getReminderAsync = getReminderAsync;\nexports.createReminderAsync = createReminderAsync;\nexports.updateReminderAsync = updateReminderAsync;\nexports.deleteReminderAsync = deleteReminderAsync;\nexports.getSourcesAsync = getSourcesAsync;\nexports.getSourceAsync = getSourceAsync;\nexports.openEventInCalendar = openEventInCalendar;\nexports.requestPermissionsAsync = requestPermissionsAsync;\nexports.getCalendarPermissionsAsync = getCalendarPermissionsAsync;\nexports.getRemindersPermissionsAsync = getRemindersPermissionsAsync;\nexports.requestCalendarPermissionsAsync = requestCalendarPermissionsAsync;\nexports.requestRemindersPermissionsAsync = requestRemindersPermissionsAsync;\nObject.defineProperty(exports, \"PermissionStatus\", {\n  enumerable: true,\n  get: function get() {\n    return _expoModulesCore.PermissionStatus;\n  }\n});\nexports.ReminderStatus = exports.CalendarAccessLevel = exports.EventAccessLevel = exports.AlarmMethod = exports.AttendeeType = exports.AttendeeStatus = exports.AttendeeRole = exports.SourceType = exports.EventStatus = exports.CalendarType = exports.Availability = exports.Frequency = exports.EntityTypes = exports.MonthOfTheYear = exports.DayOfTheWeek = void 0;\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\nvar _extends4 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\nvar _core = require(\"@unimodules/core\");\nvar _expoModulesCore = require(\"expo-modules-core\");\nvar _reactNative = require(\"react-native\");\nvar _ExpoCalendar = _interopRequireDefault(require(\"./ExpoCalendar\"));\nvar _excluded = [\"id\"],\n  _excluded2 = [\"id\"];\nvar DayOfTheWeek;\nexports.DayOfTheWeek = DayOfTheWeek;\n(function (DayOfTheWeek) {\n  DayOfTheWeek[DayOfTheWeek[\"Sunday\"] = 1] = \"Sunday\";\n  DayOfTheWeek[DayOfTheWeek[\"Monday\"] = 2] = \"Monday\";\n  DayOfTheWeek[DayOfTheWeek[\"Tuesday\"] = 3] = \"Tuesday\";\n  DayOfTheWeek[DayOfTheWeek[\"Wednesday\"] = 4] = \"Wednesday\";\n  DayOfTheWeek[DayOfTheWeek[\"Thursday\"] = 5] = \"Thursday\";\n  DayOfTheWeek[DayOfTheWeek[\"Friday\"] = 6] = \"Friday\";\n  DayOfTheWeek[DayOfTheWeek[\"Saturday\"] = 7] = \"Saturday\";\n})(DayOfTheWeek || (exports.DayOfTheWeek = DayOfTheWeek = {}));\nvar MonthOfTheYear;\nexports.MonthOfTheYear = MonthOfTheYear;\n(function (MonthOfTheYear) {\n  MonthOfTheYear[MonthOfTheYear[\"January\"] = 1] = \"January\";\n  MonthOfTheYear[MonthOfTheYear[\"February\"] = 2] = \"February\";\n  MonthOfTheYear[MonthOfTheYear[\"March\"] = 3] = \"March\";\n  MonthOfTheYear[MonthOfTheYear[\"April\"] = 4] = \"April\";\n  MonthOfTheYear[MonthOfTheYear[\"May\"] = 5] = \"May\";\n  MonthOfTheYear[MonthOfTheYear[\"June\"] = 6] = \"June\";\n  MonthOfTheYear[MonthOfTheYear[\"July\"] = 7] = \"July\";\n  MonthOfTheYear[MonthOfTheYear[\"August\"] = 8] = \"August\";\n  MonthOfTheYear[MonthOfTheYear[\"September\"] = 9] = \"September\";\n  MonthOfTheYear[MonthOfTheYear[\"October\"] = 10] = \"October\";\n  MonthOfTheYear[MonthOfTheYear[\"November\"] = 11] = \"November\";\n  MonthOfTheYear[MonthOfTheYear[\"December\"] = 12] = \"December\";\n})(MonthOfTheYear || (exports.MonthOfTheYear = MonthOfTheYear = {}));\nfunction isAvailableAsync() {\n  return _regenerator.default.async(function isAvailableAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          return _context.abrupt(\"return\", !!_ExpoCalendar.default.getCalendarsAsync);\n        case 1:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nfunction getCalendarsAsync(entityType) {\n  return _regenerator.default.async(function getCalendarsAsync$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          if (_ExpoCalendar.default.getCalendarsAsync) {\n            _context2.next = 2;\n            break;\n          }\n          throw new _core.UnavailabilityError('Calendar', 'getCalendarsAsync');\n        case 2:\n          if (entityType) {\n            _context2.next = 4;\n            break;\n          }\n          return _context2.abrupt(\"return\", _ExpoCalendar.default.getCalendarsAsync(null));\n        case 4:\n          return _context2.abrupt(\"return\", _ExpoCalendar.default.getCalendarsAsync(entityType));\n        case 5:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nfunction createCalendarAsync() {\n  var details,\n    color,\n    newDetails,\n    _args3 = arguments;\n  return _regenerator.default.async(function createCalendarAsync$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          details = _args3.length > 0 && _args3[0] !== undefined ? _args3[0] : {};\n          if (_ExpoCalendar.default.saveCalendarAsync) {\n            _context3.next = 3;\n            break;\n          }\n          throw new _core.UnavailabilityError('Calendar', 'createCalendarAsync');\n        case 3:\n          color = details.color ? (0, _reactNative.processColor)(details.color) : undefined;\n          newDetails = (0, _extends4.default)({}, details, {\n            id: undefined,\n            color: color\n          });\n          return _context3.abrupt(\"return\", _ExpoCalendar.default.saveCalendarAsync(newDetails));\n        case 6:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nfunction updateCalendarAsync(id) {\n  var details,\n    color,\n    newDetails,\n    _args4 = arguments;\n  return _regenerator.default.async(function updateCalendarAsync$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          details = _args4.length > 1 && _args4[1] !== undefined ? _args4[1] : {};\n          if (_ExpoCalendar.default.saveCalendarAsync) {\n            _context4.next = 3;\n            break;\n          }\n          throw new _core.UnavailabilityError('Calendar', 'updateCalendarAsync');\n        case 3:\n          if (id) {\n            _context4.next = 5;\n            break;\n          }\n          throw new Error('updateCalendarAsync must be called with an id (string) of the target calendar');\n        case 5:\n          color = details.color ? (0, _reactNative.processColor)(details.color) : undefined;\n          if (_reactNative.Platform.OS === 'android') {\n            if (details.hasOwnProperty('source') || details.hasOwnProperty('color') || details.hasOwnProperty('allowsModifications') || details.hasOwnProperty('allowedAvailabilities') || details.hasOwnProperty('isPrimary') || details.hasOwnProperty('ownerAccount') || details.hasOwnProperty('timeZone') || details.hasOwnProperty('allowedReminders') || details.hasOwnProperty('allowedAttendeeTypes') || details.hasOwnProperty('accessLevel')) {}\n          } else {\n            if (details.hasOwnProperty('source') || details.hasOwnProperty('type') || details.hasOwnProperty('entityType') || details.hasOwnProperty('allowsModifications') || details.hasOwnProperty('allowedAvailabilities')) {}\n          }\n          newDetails = (0, _extends4.default)({}, details, {\n            id: id,\n            color: color\n          });\n          return _context4.abrupt(\"return\", _ExpoCalendar.default.saveCalendarAsync(newDetails));\n        case 9:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nfunction deleteCalendarAsync(id) {\n  return _regenerator.default.async(function deleteCalendarAsync$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          if (_ExpoCalendar.default.deleteCalendarAsync) {\n            _context5.next = 2;\n            break;\n          }\n          throw new _core.UnavailabilityError('Calendar', 'deleteCalendarAsync');\n        case 2:\n          if (id) {\n            _context5.next = 4;\n            break;\n          }\n          throw new Error('deleteCalendarAsync must be called with an id (string) of the target calendar');\n        case 4:\n          return _context5.abrupt(\"return\", _ExpoCalendar.default.deleteCalendarAsync(id));\n        case 5:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nfunction getEventsAsync(calendarIds, startDate, endDate) {\n  return _regenerator.default.async(function getEventsAsync$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          if (_ExpoCalendar.default.getEventsAsync) {\n            _context6.next = 2;\n            break;\n          }\n          throw new _core.UnavailabilityError('Calendar', 'getEventsAsync');\n        case 2:\n          if (startDate) {\n            _context6.next = 4;\n            break;\n          }\n          throw new Error('getEventsAsync must be called with a startDate (date) to search for events');\n        case 4:\n          if (endDate) {\n            _context6.next = 6;\n            break;\n          }\n          throw new Error('getEventsAsync must be called with an endDate (date) to search for events');\n        case 6:\n          if (!(!calendarIds || !calendarIds.length)) {\n            _context6.next = 8;\n            break;\n          }\n          throw new Error('getEventsAsync must be called with a non-empty array of calendarIds to search');\n        case 8:\n          return _context6.abrupt(\"return\", _ExpoCalendar.default.getEventsAsync(stringifyIfDate(startDate), stringifyIfDate(endDate), calendarIds));\n        case 9:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nfunction getEventAsync(id) {\n  var _ref,\n    _ref$futureEvents,\n    futureEvents,\n    instanceStartDate,\n    _args7 = arguments;\n  return _regenerator.default.async(function getEventAsync$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _ref = _args7.length > 1 && _args7[1] !== undefined ? _args7[1] : {}, _ref$futureEvents = _ref.futureEvents, futureEvents = _ref$futureEvents === void 0 ? false : _ref$futureEvents, instanceStartDate = _ref.instanceStartDate;\n          if (_ExpoCalendar.default.getEventByIdAsync) {\n            _context7.next = 3;\n            break;\n          }\n          throw new _core.UnavailabilityError('Calendar', 'getEventAsync');\n        case 3:\n          if (id) {\n            _context7.next = 5;\n            break;\n          }\n          throw new Error('getEventAsync must be called with an id (string) of the target event');\n        case 5:\n          if (!(_reactNative.Platform.OS === 'ios')) {\n            _context7.next = 9;\n            break;\n          }\n          return _context7.abrupt(\"return\", _ExpoCalendar.default.getEventByIdAsync(id, instanceStartDate));\n        case 9:\n          return _context7.abrupt(\"return\", _ExpoCalendar.default.getEventByIdAsync(id));\n        case 10:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nfunction createEventAsync(calendarId) {\n  var _ref2,\n    id,\n    details,\n    newDetails,\n    _args8 = arguments;\n  return _regenerator.default.async(function createEventAsync$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _ref2 = _args8.length > 1 && _args8[1] !== undefined ? _args8[1] : {}, id = _ref2.id, details = (0, _objectWithoutProperties2.default)(_ref2, _excluded);\n          if (_ExpoCalendar.default.saveEventAsync) {\n            _context8.next = 3;\n            break;\n          }\n          throw new _core.UnavailabilityError('Calendar', 'createEventAsync');\n        case 3:\n          if (calendarId) {\n            _context8.next = 5;\n            break;\n          }\n          throw new Error('createEventAsync must be called with an id (string) of the target calendar');\n        case 5:\n          if (!(_reactNative.Platform.OS === 'android')) {\n            _context8.next = 10;\n            break;\n          }\n          if (details.startDate) {\n            _context8.next = 8;\n            break;\n          }\n          throw new Error('createEventAsync requires a startDate (Date)');\n        case 8:\n          if (details.endDate) {\n            _context8.next = 10;\n            break;\n          }\n          throw new Error('createEventAsync requires an endDate (Date)');\n        case 10:\n          newDetails = (0, _extends4.default)({}, details, {\n            calendarId: calendarId\n          });\n          return _context8.abrupt(\"return\", _ExpoCalendar.default.saveEventAsync(stringifyDateValues(newDetails), {}));\n        case 12:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nfunction updateEventAsync(id) {\n  var details,\n    _ref3,\n    _ref3$futureEvents,\n    futureEvents,\n    instanceStartDate,\n    newDetails,\n    _args9 = arguments;\n  return _regenerator.default.async(function updateEventAsync$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          details = _args9.length > 1 && _args9[1] !== undefined ? _args9[1] : {};\n          _ref3 = _args9.length > 2 && _args9[2] !== undefined ? _args9[2] : {}, _ref3$futureEvents = _ref3.futureEvents, futureEvents = _ref3$futureEvents === void 0 ? false : _ref3$futureEvents, instanceStartDate = _ref3.instanceStartDate;\n          if (_ExpoCalendar.default.saveEventAsync) {\n            _context9.next = 4;\n            break;\n          }\n          throw new _core.UnavailabilityError('Calendar', 'updateEventAsync');\n        case 4:\n          if (id) {\n            _context9.next = 6;\n            break;\n          }\n          throw new Error('updateEventAsync must be called with an id (string) of the target event');\n        case 6:\n          if (_reactNative.Platform.OS === 'ios') {\n            if (details.hasOwnProperty('creationDate') || details.hasOwnProperty('lastModifiedDate') || details.hasOwnProperty('originalStartDate') || details.hasOwnProperty('isDetached') || details.hasOwnProperty('status') || details.hasOwnProperty('organizer')) {}\n          }\n          newDetails = (0, _extends4.default)({}, details, {\n            id: id,\n            instanceStartDate: instanceStartDate\n          });\n          return _context9.abrupt(\"return\", _ExpoCalendar.default.saveEventAsync(stringifyDateValues(newDetails), {\n            futureEvents: futureEvents\n          }));\n        case 9:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nfunction deleteEventAsync(id) {\n  var _ref4,\n    _ref4$futureEvents,\n    futureEvents,\n    instanceStartDate,\n    _args10 = arguments;\n  return _regenerator.default.async(function deleteEventAsync$(_context10) {\n    while (1) {\n      switch (_context10.prev = _context10.next) {\n        case 0:\n          _ref4 = _args10.length > 1 && _args10[1] !== undefined ? _args10[1] : {}, _ref4$futureEvents = _ref4.futureEvents, futureEvents = _ref4$futureEvents === void 0 ? false : _ref4$futureEvents, instanceStartDate = _ref4.instanceStartDate;\n          if (_ExpoCalendar.default.deleteEventAsync) {\n            _context10.next = 3;\n            break;\n          }\n          throw new _core.UnavailabilityError('Calendar', 'deleteEventAsync');\n        case 3:\n          if (id) {\n            _context10.next = 5;\n            break;\n          }\n          throw new Error('deleteEventAsync must be called with an id (string) of the target event');\n        case 5:\n          return _context10.abrupt(\"return\", _ExpoCalendar.default.deleteEventAsync({\n            id: id,\n            instanceStartDate: instanceStartDate\n          }, {\n            futureEvents: futureEvents\n          }));\n        case 6:\n        case \"end\":\n          return _context10.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nfunction getAttendeesForEventAsync(id) {\n  var _ref5,\n    _ref5$futureEvents,\n    futureEvents,\n    instanceStartDate,\n    params,\n    _args11 = arguments;\n  return _regenerator.default.async(function getAttendeesForEventAsync$(_context11) {\n    while (1) {\n      switch (_context11.prev = _context11.next) {\n        case 0:\n          _ref5 = _args11.length > 1 && _args11[1] !== undefined ? _args11[1] : {}, _ref5$futureEvents = _ref5.futureEvents, futureEvents = _ref5$futureEvents === void 0 ? false : _ref5$futureEvents, instanceStartDate = _ref5.instanceStartDate;\n          if (_ExpoCalendar.default.getAttendeesForEventAsync) {\n            _context11.next = 3;\n            break;\n          }\n          throw new _core.UnavailabilityError('Calendar', 'getAttendeesForEventAsync');\n        case 3:\n          if (id) {\n            _context11.next = 5;\n            break;\n          }\n          throw new Error('getAttendeesForEventAsync must be called with an id (string) of the target event');\n        case 5:\n          params = _reactNative.Platform.OS === 'ios' ? {\n            id: id,\n            instanceStartDate: instanceStartDate\n          } : id;\n          return _context11.abrupt(\"return\", _ExpoCalendar.default.getAttendeesForEventAsync(params));\n        case 7:\n        case \"end\":\n          return _context11.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nfunction createAttendeeAsync(eventId) {\n  var details,\n    newDetails,\n    _args12 = arguments;\n  return _regenerator.default.async(function createAttendeeAsync$(_context12) {\n    while (1) {\n      switch (_context12.prev = _context12.next) {\n        case 0:\n          details = _args12.length > 1 && _args12[1] !== undefined ? _args12[1] : {};\n          if (_ExpoCalendar.default.saveAttendeeForEventAsync) {\n            _context12.next = 3;\n            break;\n          }\n          throw new _core.UnavailabilityError('Calendar', 'createAttendeeAsync');\n        case 3:\n          if (eventId) {\n            _context12.next = 5;\n            break;\n          }\n          throw new Error('createAttendeeAsync must be called with an id (string) of the target event');\n        case 5:\n          if (details.email) {\n            _context12.next = 7;\n            break;\n          }\n          throw new Error('createAttendeeAsync requires an email (string)');\n        case 7:\n          if (details.role) {\n            _context12.next = 9;\n            break;\n          }\n          throw new Error('createAttendeeAsync requires a role (string)');\n        case 9:\n          if (details.type) {\n            _context12.next = 11;\n            break;\n          }\n          throw new Error('createAttendeeAsync requires a type (string)');\n        case 11:\n          if (details.status) {\n            _context12.next = 13;\n            break;\n          }\n          throw new Error('createAttendeeAsync requires a status (string)');\n        case 13:\n          newDetails = (0, _extends4.default)({}, details, {\n            id: undefined\n          });\n          return _context12.abrupt(\"return\", _ExpoCalendar.default.saveAttendeeForEventAsync(newDetails, eventId));\n        case 15:\n        case \"end\":\n          return _context12.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nfunction updateAttendeeAsync(id) {\n  var details,\n    newDetails,\n    _args13 = arguments;\n  return _regenerator.default.async(function updateAttendeeAsync$(_context13) {\n    while (1) {\n      switch (_context13.prev = _context13.next) {\n        case 0:\n          details = _args13.length > 1 && _args13[1] !== undefined ? _args13[1] : {};\n          if (_ExpoCalendar.default.saveAttendeeForEventAsync) {\n            _context13.next = 3;\n            break;\n          }\n          throw new _core.UnavailabilityError('Calendar', 'updateAttendeeAsync');\n        case 3:\n          if (id) {\n            _context13.next = 5;\n            break;\n          }\n          throw new Error('updateAttendeeAsync must be called with an id (string) of the target event');\n        case 5:\n          newDetails = (0, _extends4.default)({}, details, {\n            id: id\n          });\n          return _context13.abrupt(\"return\", _ExpoCalendar.default.saveAttendeeForEventAsync(newDetails, null));\n        case 7:\n        case \"end\":\n          return _context13.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nfunction getDefaultCalendarAsync() {\n  return _regenerator.default.async(function getDefaultCalendarAsync$(_context14) {\n    while (1) {\n      switch (_context14.prev = _context14.next) {\n        case 0:\n          if (_ExpoCalendar.default.getDefaultCalendarAsync) {\n            _context14.next = 2;\n            break;\n          }\n          throw new _core.UnavailabilityError('Calendar', 'getDefaultCalendarAsync');\n        case 2:\n          return _context14.abrupt(\"return\", _ExpoCalendar.default.getDefaultCalendarAsync());\n        case 3:\n        case \"end\":\n          return _context14.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nfunction deleteAttendeeAsync(id) {\n  return _regenerator.default.async(function deleteAttendeeAsync$(_context15) {\n    while (1) {\n      switch (_context15.prev = _context15.next) {\n        case 0:\n          if (_ExpoCalendar.default.deleteAttendeeAsync) {\n            _context15.next = 2;\n            break;\n          }\n          throw new _core.UnavailabilityError('Calendar', 'deleteAttendeeAsync');\n        case 2:\n          if (id) {\n            _context15.next = 4;\n            break;\n          }\n          throw new Error('deleteAttendeeAsync must be called with an id (string) of the target event');\n        case 4:\n          return _context15.abrupt(\"return\", _ExpoCalendar.default.deleteAttendeeAsync(id));\n        case 5:\n        case \"end\":\n          return _context15.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nfunction getRemindersAsync(calendarIds, status, startDate, endDate) {\n  return _regenerator.default.async(function getRemindersAsync$(_context16) {\n    while (1) {\n      switch (_context16.prev = _context16.next) {\n        case 0:\n          if (_ExpoCalendar.default.getRemindersAsync) {\n            _context16.next = 2;\n            break;\n          }\n          throw new _core.UnavailabilityError('Calendar', 'getRemindersAsync');\n        case 2:\n          if (!(status && !startDate)) {\n            _context16.next = 4;\n            break;\n          }\n          throw new Error('getRemindersAsync must be called with a startDate (date) to search for reminders');\n        case 4:\n          if (!(status && !endDate)) {\n            _context16.next = 6;\n            break;\n          }\n          throw new Error('getRemindersAsync must be called with an endDate (date) to search for reminders');\n        case 6:\n          if (!(!calendarIds || !calendarIds.length)) {\n            _context16.next = 8;\n            break;\n          }\n          throw new Error('getRemindersAsync must be called with a non-empty array of calendarIds to search');\n        case 8:\n          return _context16.abrupt(\"return\", _ExpoCalendar.default.getRemindersAsync(stringifyIfDate(startDate) || null, stringifyIfDate(endDate) || null, calendarIds, status || null));\n        case 9:\n        case \"end\":\n          return _context16.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nfunction getReminderAsync(id) {\n  return _regenerator.default.async(function getReminderAsync$(_context17) {\n    while (1) {\n      switch (_context17.prev = _context17.next) {\n        case 0:\n          if (_ExpoCalendar.default.getReminderByIdAsync) {\n            _context17.next = 2;\n            break;\n          }\n          throw new _core.UnavailabilityError('Calendar', 'getReminderAsync');\n        case 2:\n          if (id) {\n            _context17.next = 4;\n            break;\n          }\n          throw new Error('getReminderAsync must be called with an id (string) of the target reminder');\n        case 4:\n          return _context17.abrupt(\"return\", _ExpoCalendar.default.getReminderByIdAsync(id));\n        case 5:\n        case \"end\":\n          return _context17.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nfunction createReminderAsync(calendarId) {\n  var _ref6,\n    id,\n    details,\n    newDetails,\n    _args18 = arguments;\n  return _regenerator.default.async(function createReminderAsync$(_context18) {\n    while (1) {\n      switch (_context18.prev = _context18.next) {\n        case 0:\n          _ref6 = _args18.length > 1 && _args18[1] !== undefined ? _args18[1] : {}, id = _ref6.id, details = (0, _objectWithoutProperties2.default)(_ref6, _excluded2);\n          if (_ExpoCalendar.default.saveReminderAsync) {\n            _context18.next = 3;\n            break;\n          }\n          throw new _core.UnavailabilityError('Calendar', 'createReminderAsync');\n        case 3:\n          newDetails = (0, _extends4.default)({}, details, {\n            calendarId: calendarId === null ? undefined : calendarId\n          });\n          return _context18.abrupt(\"return\", _ExpoCalendar.default.saveReminderAsync(stringifyDateValues(newDetails)));\n        case 5:\n        case \"end\":\n          return _context18.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nfunction updateReminderAsync(id) {\n  var details,\n    newDetails,\n    _args19 = arguments;\n  return _regenerator.default.async(function updateReminderAsync$(_context19) {\n    while (1) {\n      switch (_context19.prev = _context19.next) {\n        case 0:\n          details = _args19.length > 1 && _args19[1] !== undefined ? _args19[1] : {};\n          if (_ExpoCalendar.default.saveReminderAsync) {\n            _context19.next = 3;\n            break;\n          }\n          throw new _core.UnavailabilityError('Calendar', 'updateReminderAsync');\n        case 3:\n          if (id) {\n            _context19.next = 5;\n            break;\n          }\n          throw new Error('updateReminderAsync must be called with an id (string) of the target reminder');\n        case 5:\n          if (details.hasOwnProperty('creationDate') || details.hasOwnProperty('lastModifiedDate')) {}\n          newDetails = (0, _extends4.default)({}, details, {\n            id: id\n          });\n          return _context19.abrupt(\"return\", _ExpoCalendar.default.saveReminderAsync(stringifyDateValues(newDetails)));\n        case 8:\n        case \"end\":\n          return _context19.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nfunction deleteReminderAsync(id) {\n  return _regenerator.default.async(function deleteReminderAsync$(_context20) {\n    while (1) {\n      switch (_context20.prev = _context20.next) {\n        case 0:\n          if (_ExpoCalendar.default.deleteReminderAsync) {\n            _context20.next = 2;\n            break;\n          }\n          throw new _core.UnavailabilityError('Calendar', 'deleteReminderAsync');\n        case 2:\n          if (id) {\n            _context20.next = 4;\n            break;\n          }\n          throw new Error('deleteReminderAsync must be called with an id (string) of the target reminder');\n        case 4:\n          return _context20.abrupt(\"return\", _ExpoCalendar.default.deleteReminderAsync(id));\n        case 5:\n        case \"end\":\n          return _context20.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nfunction getSourcesAsync() {\n  return _regenerator.default.async(function getSourcesAsync$(_context21) {\n    while (1) {\n      switch (_context21.prev = _context21.next) {\n        case 0:\n          if (_ExpoCalendar.default.getSourcesAsync) {\n            _context21.next = 2;\n            break;\n          }\n          throw new _core.UnavailabilityError('Calendar', 'getSourcesAsync');\n        case 2:\n          return _context21.abrupt(\"return\", _ExpoCalendar.default.getSourcesAsync());\n        case 3:\n        case \"end\":\n          return _context21.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nfunction getSourceAsync(id) {\n  return _regenerator.default.async(function getSourceAsync$(_context22) {\n    while (1) {\n      switch (_context22.prev = _context22.next) {\n        case 0:\n          if (_ExpoCalendar.default.getSourceByIdAsync) {\n            _context22.next = 2;\n            break;\n          }\n          throw new _core.UnavailabilityError('Calendar', 'getSourceAsync');\n        case 2:\n          if (id) {\n            _context22.next = 4;\n            break;\n          }\n          throw new Error('getSourceAsync must be called with an id (string) of the target source');\n        case 4:\n          return _context22.abrupt(\"return\", _ExpoCalendar.default.getSourceByIdAsync(id));\n        case 5:\n        case \"end\":\n          return _context22.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nfunction openEventInCalendar(id) {\n  if (!_ExpoCalendar.default.openEventInCalendar) {\n    return;\n  }\n  if (!id) {\n    throw new Error('openEventInCalendar must be called with an id (string) of the target event');\n  }\n  return _ExpoCalendar.default.openEventInCalendar(parseInt(id, 10));\n}\nfunction requestPermissionsAsync() {\n  return _regenerator.default.async(function requestPermissionsAsync$(_context23) {\n    while (1) {\n      switch (_context23.prev = _context23.next) {\n        case 0:\n          return _context23.abrupt(\"return\", requestCalendarPermissionsAsync());\n        case 1:\n        case \"end\":\n          return _context23.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nfunction getCalendarPermissionsAsync() {\n  return _regenerator.default.async(function getCalendarPermissionsAsync$(_context24) {\n    while (1) {\n      switch (_context24.prev = _context24.next) {\n        case 0:\n          if (_ExpoCalendar.default.getCalendarPermissionsAsync) {\n            _context24.next = 2;\n            break;\n          }\n          throw new _core.UnavailabilityError('Calendar', 'getCalendarPermissionsAsync');\n        case 2:\n          return _context24.abrupt(\"return\", _ExpoCalendar.default.getCalendarPermissionsAsync());\n        case 3:\n        case \"end\":\n          return _context24.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nfunction getRemindersPermissionsAsync() {\n  return _regenerator.default.async(function getRemindersPermissionsAsync$(_context25) {\n    while (1) {\n      switch (_context25.prev = _context25.next) {\n        case 0:\n          if (_ExpoCalendar.default.getRemindersPermissionsAsync) {\n            _context25.next = 2;\n            break;\n          }\n          throw new _core.UnavailabilityError('Calendar', 'getRemindersPermissionsAsync');\n        case 2:\n          return _context25.abrupt(\"return\", _ExpoCalendar.default.getRemindersPermissionsAsync());\n        case 3:\n        case \"end\":\n          return _context25.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nfunction requestCalendarPermissionsAsync() {\n  return _regenerator.default.async(function requestCalendarPermissionsAsync$(_context26) {\n    while (1) {\n      switch (_context26.prev = _context26.next) {\n        case 0:\n          if (_ExpoCalendar.default.requestCalendarPermissionsAsync) {\n            _context26.next = 2;\n            break;\n          }\n          throw new _core.UnavailabilityError('Calendar', 'requestCalendarPermissionsAsync');\n        case 2:\n          _context26.next = 4;\n          return _regenerator.default.awrap(_ExpoCalendar.default.requestCalendarPermissionsAsync());\n        case 4:\n          return _context26.abrupt(\"return\", _context26.sent);\n        case 5:\n        case \"end\":\n          return _context26.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nfunction requestRemindersPermissionsAsync() {\n  return _regenerator.default.async(function requestRemindersPermissionsAsync$(_context27) {\n    while (1) {\n      switch (_context27.prev = _context27.next) {\n        case 0:\n          if (_ExpoCalendar.default.requestRemindersPermissionsAsync) {\n            _context27.next = 2;\n            break;\n          }\n          throw new _core.UnavailabilityError('Calendar', 'requestRemindersPermissionsAsync');\n        case 2:\n          _context27.next = 4;\n          return _regenerator.default.awrap(_ExpoCalendar.default.requestRemindersPermissionsAsync());\n        case 4:\n          return _context27.abrupt(\"return\", _context27.sent);\n        case 5:\n        case \"end\":\n          return _context27.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nvar EntityTypes = {\n  EVENT: 'event',\n  REMINDER: 'reminder'\n};\nexports.EntityTypes = EntityTypes;\nvar Frequency = {\n  DAILY: 'daily',\n  WEEKLY: 'weekly',\n  MONTHLY: 'monthly',\n  YEARLY: 'yearly'\n};\nexports.Frequency = Frequency;\nvar Availability = {\n  NOT_SUPPORTED: 'notSupported',\n  BUSY: 'busy',\n  FREE: 'free',\n  TENTATIVE: 'tentative',\n  UNAVAILABLE: 'unavailable'\n};\nexports.Availability = Availability;\nvar CalendarType = {\n  LOCAL: 'local',\n  CALDAV: 'caldav',\n  EXCHANGE: 'exchange',\n  SUBSCRIBED: 'subscribed',\n  BIRTHDAYS: 'birthdays',\n  UNKNOWN: 'unknown'\n};\nexports.CalendarType = CalendarType;\nvar EventStatus = {\n  NONE: 'none',\n  CONFIRMED: 'confirmed',\n  TENTATIVE: 'tentative',\n  CANCELED: 'canceled'\n};\nexports.EventStatus = EventStatus;\nvar SourceType = {\n  LOCAL: 'local',\n  EXCHANGE: 'exchange',\n  CALDAV: 'caldav',\n  MOBILEME: 'mobileme',\n  SUBSCRIBED: 'subscribed',\n  BIRTHDAYS: 'birthdays'\n};\nexports.SourceType = SourceType;\nvar AttendeeRole = {\n  UNKNOWN: 'unknown',\n  REQUIRED: 'required',\n  OPTIONAL: 'optional',\n  CHAIR: 'chair',\n  NON_PARTICIPANT: 'nonParticipant',\n  ATTENDEE: 'attendee',\n  ORGANIZER: 'organizer',\n  PERFORMER: 'performer',\n  SPEAKER: 'speaker',\n  NONE: 'none'\n};\nexports.AttendeeRole = AttendeeRole;\nvar AttendeeStatus = {\n  UNKNOWN: 'unknown',\n  PENDING: 'pending',\n  ACCEPTED: 'accepted',\n  DECLINED: 'declined',\n  TENTATIVE: 'tentative',\n  DELEGATED: 'delegated',\n  COMPLETED: 'completed',\n  IN_PROCESS: 'inProcess',\n  INVITED: 'invited',\n  NONE: 'none'\n};\nexports.AttendeeStatus = AttendeeStatus;\nvar AttendeeType = {\n  UNKNOWN: 'unknown',\n  PERSON: 'person',\n  ROOM: 'room',\n  GROUP: 'group',\n  RESOURCE: 'resource',\n  OPTIONAL: 'optional',\n  REQUIRED: 'required',\n  NONE: 'none'\n};\nexports.AttendeeType = AttendeeType;\nvar AlarmMethod = {\n  ALARM: 'alarm',\n  ALERT: 'alert',\n  EMAIL: 'email',\n  SMS: 'sms',\n  DEFAULT: 'default'\n};\nexports.AlarmMethod = AlarmMethod;\nvar EventAccessLevel = {\n  CONFIDENTIAL: 'confidential',\n  PRIVATE: 'private',\n  PUBLIC: 'public',\n  DEFAULT: 'default'\n};\nexports.EventAccessLevel = EventAccessLevel;\nvar CalendarAccessLevel = {\n  CONTRIBUTOR: 'contributor',\n  EDITOR: 'editor',\n  FREEBUSY: 'freebusy',\n  OVERRIDE: 'override',\n  OWNER: 'owner',\n  READ: 'read',\n  RESPOND: 'respond',\n  ROOT: 'root',\n  NONE: 'none'\n};\nexports.CalendarAccessLevel = CalendarAccessLevel;\nvar ReminderStatus = {\n  COMPLETED: 'completed',\n  INCOMPLETE: 'incomplete'\n};\nexports.ReminderStatus = ReminderStatus;\nfunction stringifyIfDate(date) {\n  return date instanceof Date ? date.toISOString() : date;\n}\nfunction stringifyDateValues(obj) {\n  return Object.keys(obj).reduce(function (acc, key) {\n    var value = obj[key];\n    if (value != null && typeof value === 'object' && !(value instanceof Date)) {\n      if (Array.isArray(value)) {\n        return (0, _extends4.default)({}, acc, (0, _defineProperty2.default)({}, key, value.map(stringifyDateValues)));\n      }\n      return (0, _extends4.default)({}, acc, (0, _defineProperty2.default)({}, key, stringifyDateValues(value)));\n    }\n    acc[key] = stringifyIfDate(value);\n    return acc;\n  }, {});\n}","map":{"version":3,"mappings":"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","names":["DayOfTheWeek","MonthOfTheYear","isAvailableAsync","ExpoCalendar","getCalendarsAsync","entityType","UnavailabilityError","createCalendarAsync","details","saveCalendarAsync","color","undefined","newDetails","id","updateCalendarAsync","Error","Platform","OS","hasOwnProperty","deleteCalendarAsync","getEventsAsync","calendarIds","startDate","endDate","length","stringifyIfDate","getEventAsync","futureEvents","instanceStartDate","getEventByIdAsync","createEventAsync","calendarId","saveEventAsync","stringifyDateValues","updateEventAsync","deleteEventAsync","getAttendeesForEventAsync","params","createAttendeeAsync","eventId","saveAttendeeForEventAsync","email","role","type","status","updateAttendeeAsync","getDefaultCalendarAsync","deleteAttendeeAsync","getRemindersAsync","getReminderAsync","getReminderByIdAsync","createReminderAsync","saveReminderAsync","updateReminderAsync","deleteReminderAsync","getSourcesAsync","getSourceAsync","getSourceByIdAsync","openEventInCalendar","parseInt","requestPermissionsAsync","requestCalendarPermissionsAsync","getCalendarPermissionsAsync","getRemindersPermissionsAsync","requestRemindersPermissionsAsync","EntityTypes","EVENT","REMINDER","Frequency","DAILY","WEEKLY","MONTHLY","YEARLY","Availability","NOT_SUPPORTED","BUSY","FREE","TENTATIVE","UNAVAILABLE","CalendarType","LOCAL","CALDAV","EXCHANGE","SUBSCRIBED","BIRTHDAYS","UNKNOWN","EventStatus","NONE","CONFIRMED","CANCELED","SourceType","MOBILEME","AttendeeRole","REQUIRED","OPTIONAL","CHAIR","NON_PARTICIPANT","ATTENDEE","ORGANIZER","PERFORMER","SPEAKER","AttendeeStatus","PENDING","ACCEPTED","DECLINED","DELEGATED","COMPLETED","IN_PROCESS","INVITED","AttendeeType","PERSON","ROOM","GROUP","RESOURCE","AlarmMethod","ALARM","ALERT","EMAIL","SMS","DEFAULT","EventAccessLevel","CONFIDENTIAL","PRIVATE","PUBLIC","CalendarAccessLevel","CONTRIBUTOR","EDITOR","FREEBUSY","OVERRIDE","OWNER","READ","RESPOND","ROOT","ReminderStatus","INCOMPLETE","date","Date","toISOString","obj","Object","keys","reduce","acc","key","value","Array","isArray","map"],"sourceRoot":"","sources":["../src/Calendar.ts"],"sourcesContent":["import { UnavailabilityError } from '@unimodules/core';\nimport { PermissionResponse, PermissionStatus } from 'expo-modules-core';\nimport { Platform, processColor } from 'react-native';\n\nimport ExpoCalendar from './ExpoCalendar';\n\nexport type RecurringEventOptions = {\n  futureEvents?: boolean;\n  instanceStartDate?: string | Date;\n}; // iOS\n\nexport interface Calendar {\n  id: string;\n  title: string;\n  sourceId?: string; // iOS\n  source: Source;\n  type?: string; // iOS\n  color: string;\n  entityType?: string; // iOS\n  allowsModifications: boolean;\n  allowedAvailabilities: string[];\n  isPrimary?: boolean; // Android\n  name?: string | null; // Android\n  ownerAccount?: string; // Android\n  timeZone?: string; // Android\n  allowedReminders?: string[]; // Android\n  allowedAttendeeTypes?: string[]; // Android\n  isVisible?: boolean; // Android\n  isSynced?: boolean; // Android\n  accessLevel?: string; // Android\n}\n\nexport type Source = {\n  id?: string; // iOS only ??\n  type: string;\n  name: string;\n  isLocalAccount?: boolean; // Android\n};\n\nexport type Event = {\n  id: string;\n  calendarId: string;\n  title: string;\n  location: string;\n  creationDate?: string | Date; // iOS\n  lastModifiedDate?: string | Date; // iOS\n  timeZone: string;\n  endTimeZone?: string; // Android\n  url?: string; // iOS\n  notes: string;\n  alarms: Alarm[];\n  recurrenceRule: RecurrenceRule;\n  startDate: string | Date;\n  endDate: string | Date;\n  originalStartDate?: string | Date; // iOS\n  isDetached?: boolean; // iOS\n  allDay: boolean;\n  availability: string; // Availability\n  status: string; // Status\n  organizer?: string; // Organizer - iOS\n  organizerEmail?: string; // Android\n  accessLevel?: string; // Android,\n  guestsCanModify?: boolean; // Android,\n  guestsCanInviteOthers?: boolean; // Android\n  guestsCanSeeGuests?: boolean; // Android\n  originalId?: string; // Android\n  instanceId?: string; // Android\n};\n\nexport interface Reminder {\n  id?: string;\n  calendarId?: string;\n  title?: string;\n  location?: string;\n  creationDate?: string | Date;\n  lastModifiedDate?: string | Date;\n  timeZone?: string;\n  url?: string;\n  notes?: string;\n  alarms?: Alarm[];\n  recurrenceRule?: RecurrenceRule;\n  startDate?: string | Date;\n  dueDate?: string | Date;\n  completed?: boolean;\n  completionDate?: string | Date;\n}\n\nexport type Attendee = {\n  id?: string; // Android\n  isCurrentUser?: boolean; // iOS\n  name: string;\n  role: string;\n  status: string;\n  type: string;\n  url?: string; // iOS\n  email?: string; // Android\n};\n\nexport type Alarm = {\n  absoluteDate?: string; // iOS\n  relativeOffset?: number;\n  structuredLocation?: {\n    // iOS\n    title?: string;\n    proximity?: string; // Proximity\n    radius?: number;\n    coords?: {\n      latitude?: number;\n      longitude?: number;\n    };\n  };\n  method?: string; // Method, Android\n};\n\nexport enum DayOfTheWeek {\n  Sunday = 1,\n  Monday = 2,\n  Tuesday = 3,\n  Wednesday = 4,\n  Thursday = 5,\n  Friday = 6,\n  Saturday = 7,\n}\n\nexport enum MonthOfTheYear {\n  January = 1,\n  February = 2,\n  March = 3,\n  April = 4,\n  May = 5,\n  June = 6,\n  July = 7,\n  August = 8,\n  September = 9,\n  October = 10,\n  November = 11,\n  December = 12,\n}\n\nexport type RecurrenceRule = {\n  frequency: string; // Frequency\n  interval?: number;\n  endDate?: string | Date;\n  occurrence?: number;\n\n  daysOfTheWeek?: { dayOfTheWeek: DayOfTheWeek; weekNumber?: number }[];\n  daysOfTheMonth?: number[];\n  monthsOfTheYear?: MonthOfTheYear[];\n  weeksOfTheYear?: number[];\n  daysOfTheYear?: number[];\n  setPositions?: number[];\n};\n\nexport { PermissionResponse, PermissionStatus };\n\ntype OptionalKeys<T> = {\n  [P in keyof T]?: T[P] | null;\n};\n\n/**\n * Returns whether the Calendar API is enabled on the current device. This does not check the app permissions.\n *\n * @returns Async `boolean`, indicating whether the Calendar API is available on the current device. Currently this resolves `true` on iOS and Android only.\n */\nexport async function isAvailableAsync(): Promise<boolean> {\n  return !!ExpoCalendar.getCalendarsAsync;\n}\n\nexport async function getCalendarsAsync(entityType?: string): Promise<Calendar[]> {\n  if (!ExpoCalendar.getCalendarsAsync) {\n    throw new UnavailabilityError('Calendar', 'getCalendarsAsync');\n  }\n  if (!entityType) {\n    return ExpoCalendar.getCalendarsAsync(null);\n  }\n  return ExpoCalendar.getCalendarsAsync(entityType);\n}\n\nexport async function createCalendarAsync(details: OptionalKeys<Calendar> = {}): Promise<string> {\n  if (!ExpoCalendar.saveCalendarAsync) {\n    throw new UnavailabilityError('Calendar', 'createCalendarAsync');\n  }\n  const color = details.color ? processColor(details.color) : undefined;\n  const newDetails = { ...details, id: undefined, color };\n  return ExpoCalendar.saveCalendarAsync(newDetails);\n}\n\nexport async function updateCalendarAsync(\n  id: string,\n  details: OptionalKeys<Calendar> = {}\n): Promise<string> {\n  if (!ExpoCalendar.saveCalendarAsync) {\n    throw new UnavailabilityError('Calendar', 'updateCalendarAsync');\n  }\n  if (!id) {\n    throw new Error(\n      'updateCalendarAsync must be called with an id (string) of the target calendar'\n    );\n  }\n  const color = details.color ? processColor(details.color) : undefined;\n\n  if (Platform.OS === 'android') {\n    if (\n      details.hasOwnProperty('source') ||\n      details.hasOwnProperty('color') ||\n      details.hasOwnProperty('allowsModifications') ||\n      details.hasOwnProperty('allowedAvailabilities') ||\n      details.hasOwnProperty('isPrimary') ||\n      details.hasOwnProperty('ownerAccount') ||\n      details.hasOwnProperty('timeZone') ||\n      details.hasOwnProperty('allowedReminders') ||\n      details.hasOwnProperty('allowedAttendeeTypes') ||\n      details.hasOwnProperty('accessLevel')\n    ) {\n      console.warn(\n        'updateCalendarAsync was called with one or more read-only properties, which will not be updated'\n      );\n    }\n  } else {\n    if (\n      details.hasOwnProperty('source') ||\n      details.hasOwnProperty('type') ||\n      details.hasOwnProperty('entityType') ||\n      details.hasOwnProperty('allowsModifications') ||\n      details.hasOwnProperty('allowedAvailabilities')\n    ) {\n      console.warn(\n        'updateCalendarAsync was called with one or more read-only properties, which will not be updated'\n      );\n    }\n  }\n\n  const newDetails = { ...details, id, color };\n  return ExpoCalendar.saveCalendarAsync(newDetails);\n}\n\nexport async function deleteCalendarAsync(id: string): Promise<void> {\n  if (!ExpoCalendar.deleteCalendarAsync) {\n    throw new UnavailabilityError('Calendar', 'deleteCalendarAsync');\n  }\n  if (!id) {\n    throw new Error(\n      'deleteCalendarAsync must be called with an id (string) of the target calendar'\n    );\n  }\n  return ExpoCalendar.deleteCalendarAsync(id);\n}\n\nexport async function getEventsAsync(\n  calendarIds: string[],\n  startDate: Date,\n  endDate: Date\n): Promise<Event[]> {\n  if (!ExpoCalendar.getEventsAsync) {\n    throw new UnavailabilityError('Calendar', 'getEventsAsync');\n  }\n  if (!startDate) {\n    throw new Error('getEventsAsync must be called with a startDate (date) to search for events');\n  }\n  if (!endDate) {\n    throw new Error('getEventsAsync must be called with an endDate (date) to search for events');\n  }\n  if (!calendarIds || !calendarIds.length) {\n    throw new Error(\n      'getEventsAsync must be called with a non-empty array of calendarIds to search'\n    );\n  }\n  return ExpoCalendar.getEventsAsync(\n    stringifyIfDate(startDate),\n    stringifyIfDate(endDate),\n    calendarIds\n  );\n}\n\nexport async function getEventAsync(\n  id: string,\n  { futureEvents = false, instanceStartDate }: RecurringEventOptions = {}\n): Promise<Event> {\n  if (!ExpoCalendar.getEventByIdAsync) {\n    throw new UnavailabilityError('Calendar', 'getEventAsync');\n  }\n  if (!id) {\n    throw new Error('getEventAsync must be called with an id (string) of the target event');\n  }\n  if (Platform.OS === 'ios') {\n    return ExpoCalendar.getEventByIdAsync(id, instanceStartDate);\n  } else {\n    return ExpoCalendar.getEventByIdAsync(id);\n  }\n}\n\nexport async function createEventAsync(\n  calendarId: string,\n  { id, ...details }: OptionalKeys<Event> = {}\n): Promise<string> {\n  if (!ExpoCalendar.saveEventAsync) {\n    throw new UnavailabilityError('Calendar', 'createEventAsync');\n  }\n  if (!calendarId) {\n    throw new Error('createEventAsync must be called with an id (string) of the target calendar');\n  }\n\n  if (Platform.OS === 'android') {\n    if (!details.startDate) {\n      throw new Error('createEventAsync requires a startDate (Date)');\n    }\n    if (!details.endDate) {\n      throw new Error('createEventAsync requires an endDate (Date)');\n    }\n  }\n\n  const newDetails = {\n    ...details,\n    calendarId,\n  };\n\n  return ExpoCalendar.saveEventAsync(stringifyDateValues(newDetails), {});\n}\n\nexport async function updateEventAsync(\n  id: string,\n  details: OptionalKeys<Event> = {},\n  { futureEvents = false, instanceStartDate }: RecurringEventOptions = {}\n): Promise<string> {\n  if (!ExpoCalendar.saveEventAsync) {\n    throw new UnavailabilityError('Calendar', 'updateEventAsync');\n  }\n  if (!id) {\n    throw new Error('updateEventAsync must be called with an id (string) of the target event');\n  }\n\n  if (Platform.OS === 'ios') {\n    if (\n      details.hasOwnProperty('creationDate') ||\n      details.hasOwnProperty('lastModifiedDate') ||\n      details.hasOwnProperty('originalStartDate') ||\n      details.hasOwnProperty('isDetached') ||\n      details.hasOwnProperty('status') ||\n      details.hasOwnProperty('organizer')\n    ) {\n      console.warn(\n        'updateEventAsync was called with one or more read-only properties, which will not be updated'\n      );\n    }\n  }\n\n  const newDetails = { ...details, id, instanceStartDate };\n  return ExpoCalendar.saveEventAsync(stringifyDateValues(newDetails), { futureEvents });\n}\n\nexport async function deleteEventAsync(\n  id: string,\n  { futureEvents = false, instanceStartDate }: RecurringEventOptions = {}\n): Promise<void> {\n  if (!ExpoCalendar.deleteEventAsync) {\n    throw new UnavailabilityError('Calendar', 'deleteEventAsync');\n  }\n  if (!id) {\n    throw new Error('deleteEventAsync must be called with an id (string) of the target event');\n  }\n  return ExpoCalendar.deleteEventAsync({ id, instanceStartDate }, { futureEvents });\n}\n\nexport async function getAttendeesForEventAsync(\n  id: string,\n  { futureEvents = false, instanceStartDate }: RecurringEventOptions = {}\n): Promise<Attendee[]> {\n  if (!ExpoCalendar.getAttendeesForEventAsync) {\n    throw new UnavailabilityError('Calendar', 'getAttendeesForEventAsync');\n  }\n  if (!id) {\n    throw new Error(\n      'getAttendeesForEventAsync must be called with an id (string) of the target event'\n    );\n  }\n  // Android only takes an ID, iOS takes an object\n  const params = Platform.OS === 'ios' ? { id, instanceStartDate } : id;\n  return ExpoCalendar.getAttendeesForEventAsync(params);\n}\n\nexport async function createAttendeeAsync(\n  eventId: string,\n  details: OptionalKeys<Attendee> = {}\n): Promise<string> {\n  if (!ExpoCalendar.saveAttendeeForEventAsync) {\n    throw new UnavailabilityError('Calendar', 'createAttendeeAsync');\n  }\n  if (!eventId) {\n    throw new Error('createAttendeeAsync must be called with an id (string) of the target event');\n  }\n  if (!details.email) {\n    throw new Error('createAttendeeAsync requires an email (string)');\n  }\n  if (!details.role) {\n    throw new Error('createAttendeeAsync requires a role (string)');\n  }\n  if (!details.type) {\n    throw new Error('createAttendeeAsync requires a type (string)');\n  }\n  if (!details.status) {\n    throw new Error('createAttendeeAsync requires a status (string)');\n  }\n  const newDetails = { ...details, id: undefined };\n  return ExpoCalendar.saveAttendeeForEventAsync(newDetails, eventId);\n} // Android\n\nexport async function updateAttendeeAsync(\n  id: string,\n  details: OptionalKeys<Attendee> = {}\n): Promise<string> {\n  if (!ExpoCalendar.saveAttendeeForEventAsync) {\n    throw new UnavailabilityError('Calendar', 'updateAttendeeAsync');\n  }\n  if (!id) {\n    throw new Error('updateAttendeeAsync must be called with an id (string) of the target event');\n  }\n  const newDetails = { ...details, id };\n  return ExpoCalendar.saveAttendeeForEventAsync(newDetails, null);\n} // Android\n\nexport async function getDefaultCalendarAsync(): Promise<Calendar> {\n  if (!ExpoCalendar.getDefaultCalendarAsync) {\n    throw new UnavailabilityError('Calendar', 'getDefaultCalendarAsync');\n  }\n  return ExpoCalendar.getDefaultCalendarAsync();\n} // iOS\n\nexport async function deleteAttendeeAsync(id: string): Promise<void> {\n  if (!ExpoCalendar.deleteAttendeeAsync) {\n    throw new UnavailabilityError('Calendar', 'deleteAttendeeAsync');\n  }\n  if (!id) {\n    throw new Error('deleteAttendeeAsync must be called with an id (string) of the target event');\n  }\n  return ExpoCalendar.deleteAttendeeAsync(id);\n} // Android\n\nexport async function getRemindersAsync(\n  calendarIds: (string | null)[],\n  status: string | null,\n  startDate: Date,\n  endDate: Date\n): Promise<Reminder[]> {\n  if (!ExpoCalendar.getRemindersAsync) {\n    throw new UnavailabilityError('Calendar', 'getRemindersAsync');\n  }\n  if (status && !startDate) {\n    throw new Error(\n      'getRemindersAsync must be called with a startDate (date) to search for reminders'\n    );\n  }\n  if (status && !endDate) {\n    throw new Error(\n      'getRemindersAsync must be called with an endDate (date) to search for reminders'\n    );\n  }\n  if (!calendarIds || !calendarIds.length) {\n    throw new Error(\n      'getRemindersAsync must be called with a non-empty array of calendarIds to search'\n    );\n  }\n  return ExpoCalendar.getRemindersAsync(\n    stringifyIfDate(startDate) || null,\n    stringifyIfDate(endDate) || null,\n    calendarIds,\n    status || null\n  );\n} // iOS\n\nexport async function getReminderAsync(id: string): Promise<Reminder> {\n  if (!ExpoCalendar.getReminderByIdAsync) {\n    throw new UnavailabilityError('Calendar', 'getReminderAsync');\n  }\n  if (!id) {\n    throw new Error('getReminderAsync must be called with an id (string) of the target reminder');\n  }\n  return ExpoCalendar.getReminderByIdAsync(id);\n} // iOS\n\nexport async function createReminderAsync(\n  calendarId: string | null,\n  { id, ...details }: Reminder = {}\n): Promise<string> {\n  if (!ExpoCalendar.saveReminderAsync) {\n    throw new UnavailabilityError('Calendar', 'createReminderAsync');\n  }\n\n  const newDetails = {\n    ...details,\n    calendarId: calendarId === null ? undefined : calendarId,\n  };\n  return ExpoCalendar.saveReminderAsync(stringifyDateValues(newDetails));\n} // iOS\n\nexport async function updateReminderAsync(id: string, details: Reminder = {}): Promise<string> {\n  if (!ExpoCalendar.saveReminderAsync) {\n    throw new UnavailabilityError('Calendar', 'updateReminderAsync');\n  }\n  if (!id) {\n    throw new Error(\n      'updateReminderAsync must be called with an id (string) of the target reminder'\n    );\n  }\n\n  if (details.hasOwnProperty('creationDate') || details.hasOwnProperty('lastModifiedDate')) {\n    console.warn(\n      'updateReminderAsync was called with one or more read-only properties, which will not be updated'\n    );\n  }\n\n  const newDetails = { ...details, id };\n  return ExpoCalendar.saveReminderAsync(stringifyDateValues(newDetails));\n} // iOS\n\nexport async function deleteReminderAsync(id: string): Promise<void> {\n  if (!ExpoCalendar.deleteReminderAsync) {\n    throw new UnavailabilityError('Calendar', 'deleteReminderAsync');\n  }\n  if (!id) {\n    throw new Error(\n      'deleteReminderAsync must be called with an id (string) of the target reminder'\n    );\n  }\n  return ExpoCalendar.deleteReminderAsync(id);\n} // iOS\n\nexport async function getSourcesAsync(): Promise<Source[]> {\n  if (!ExpoCalendar.getSourcesAsync) {\n    throw new UnavailabilityError('Calendar', 'getSourcesAsync');\n  }\n  return ExpoCalendar.getSourcesAsync();\n} // iOS\n\nexport async function getSourceAsync(id: string): Promise<Source> {\n  if (!ExpoCalendar.getSourceByIdAsync) {\n    throw new UnavailabilityError('Calendar', 'getSourceAsync');\n  }\n  if (!id) {\n    throw new Error('getSourceAsync must be called with an id (string) of the target source');\n  }\n  return ExpoCalendar.getSourceByIdAsync(id);\n} // iOS\n\nexport function openEventInCalendar(id: string): void {\n  if (!ExpoCalendar.openEventInCalendar) {\n    console.warn(`openEventInCalendar is not available on platform: ${Platform.OS}`);\n    return;\n  }\n  if (!id) {\n    throw new Error('openEventInCalendar must be called with an id (string) of the target event');\n  }\n  return ExpoCalendar.openEventInCalendar(parseInt(id, 10));\n} // Android\n\n/**\n * @deprecated Use `requestCalendarPermissionsAsync()` instead\n */\nexport async function requestPermissionsAsync(): Promise<PermissionResponse> {\n  console.warn(\n    'requestPermissionsAsync is deprecated. Use requestCalendarPermissionsAsync instead.'\n  );\n  return requestCalendarPermissionsAsync();\n}\n\nexport async function getCalendarPermissionsAsync(): Promise<PermissionResponse> {\n  if (!ExpoCalendar.getCalendarPermissionsAsync) {\n    throw new UnavailabilityError('Calendar', 'getCalendarPermissionsAsync');\n  }\n  return ExpoCalendar.getCalendarPermissionsAsync();\n}\n\nexport async function getRemindersPermissionsAsync(): Promise<PermissionResponse> {\n  if (!ExpoCalendar.getRemindersPermissionsAsync) {\n    throw new UnavailabilityError('Calendar', 'getRemindersPermissionsAsync');\n  }\n  return ExpoCalendar.getRemindersPermissionsAsync();\n}\n\nexport async function requestCalendarPermissionsAsync(): Promise<PermissionResponse> {\n  if (!ExpoCalendar.requestCalendarPermissionsAsync) {\n    throw new UnavailabilityError('Calendar', 'requestCalendarPermissionsAsync');\n  }\n  return await ExpoCalendar.requestCalendarPermissionsAsync();\n}\n\nexport async function requestRemindersPermissionsAsync(): Promise<PermissionResponse> {\n  if (!ExpoCalendar.requestRemindersPermissionsAsync) {\n    throw new UnavailabilityError('Calendar', 'requestRemindersPermissionsAsync');\n  }\n  return await ExpoCalendar.requestRemindersPermissionsAsync();\n}\n\nexport const EntityTypes = {\n  EVENT: 'event',\n  REMINDER: 'reminder',\n};\n\nexport const Frequency = {\n  DAILY: 'daily',\n  WEEKLY: 'weekly',\n  MONTHLY: 'monthly',\n  YEARLY: 'yearly',\n};\n\nexport const Availability = {\n  NOT_SUPPORTED: 'notSupported', // iOS\n  BUSY: 'busy',\n  FREE: 'free',\n  TENTATIVE: 'tentative',\n  UNAVAILABLE: 'unavailable', // iOS\n};\n\nexport const CalendarType = {\n  LOCAL: 'local',\n  CALDAV: 'caldav',\n  EXCHANGE: 'exchange',\n  SUBSCRIBED: 'subscribed',\n  BIRTHDAYS: 'birthdays',\n  UNKNOWN: 'unknown',\n}; // iOS\n\nexport const EventStatus = {\n  NONE: 'none',\n  CONFIRMED: 'confirmed',\n  TENTATIVE: 'tentative',\n  CANCELED: 'canceled',\n};\n\nexport const SourceType = {\n  LOCAL: 'local',\n  EXCHANGE: 'exchange',\n  CALDAV: 'caldav',\n  MOBILEME: 'mobileme',\n  SUBSCRIBED: 'subscribed',\n  BIRTHDAYS: 'birthdays',\n};\n\nexport const AttendeeRole = {\n  UNKNOWN: 'unknown', // iOS\n  REQUIRED: 'required', // iOS\n  OPTIONAL: 'optional', // iOS\n  CHAIR: 'chair', // iOS\n  NON_PARTICIPANT: 'nonParticipant', // iOS\n  ATTENDEE: 'attendee', // Android\n  ORGANIZER: 'organizer', // Android\n  PERFORMER: 'performer', // Android\n  SPEAKER: 'speaker', // Android\n  NONE: 'none', // Android\n};\n\nexport const AttendeeStatus = {\n  UNKNOWN: 'unknown', // iOS\n  PENDING: 'pending', // iOS\n  ACCEPTED: 'accepted',\n  DECLINED: 'declined',\n  TENTATIVE: 'tentative',\n  DELEGATED: 'delegated', // iOS\n  COMPLETED: 'completed', // iOS\n  IN_PROCESS: 'inProcess', // iOS\n  INVITED: 'invited', // Android\n  NONE: 'none', // Android\n};\n\nexport const AttendeeType = {\n  UNKNOWN: 'unknown', // iOS\n  PERSON: 'person', // iOS\n  ROOM: 'room', // iOS\n  GROUP: 'group', // iOS\n  RESOURCE: 'resource',\n  OPTIONAL: 'optional', // Android\n  REQUIRED: 'required', // Android\n  NONE: 'none', // Android\n};\n\nexport const AlarmMethod = {\n  ALARM: 'alarm',\n  ALERT: 'alert',\n  EMAIL: 'email',\n  SMS: 'sms',\n  DEFAULT: 'default',\n};\n\nexport const EventAccessLevel = {\n  CONFIDENTIAL: 'confidential',\n  PRIVATE: 'private',\n  PUBLIC: 'public',\n  DEFAULT: 'default',\n};\n\nexport const CalendarAccessLevel = {\n  CONTRIBUTOR: 'contributor',\n  EDITOR: 'editor',\n  FREEBUSY: 'freebusy',\n  OVERRIDE: 'override',\n  OWNER: 'owner',\n  READ: 'read',\n  RESPOND: 'respond',\n  ROOT: 'root',\n  NONE: 'none',\n};\n\nexport const ReminderStatus = {\n  COMPLETED: 'completed',\n  INCOMPLETE: 'incomplete',\n};\n\nfunction stringifyIfDate(date: any): any {\n  return date instanceof Date ? date.toISOString() : date;\n}\n\nfunction stringifyDateValues(obj: object): object {\n  return Object.keys(obj).reduce((acc, key) => {\n    const value = obj[key];\n    if (value != null && typeof value === 'object' && !(value instanceof Date)) {\n      if (Array.isArray(value)) {\n        return { ...acc, [key]: value.map(stringifyDateValues) };\n      }\n      return { ...acc, [key]: stringifyDateValues(value) };\n    }\n    acc[key] = stringifyIfDate(value);\n    return acc;\n  }, {});\n}\n"]},"metadata":{},"sourceType":"script"}