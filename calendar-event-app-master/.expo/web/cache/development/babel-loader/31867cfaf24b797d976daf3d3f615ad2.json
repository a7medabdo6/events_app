{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nexports.getCalendarDateString = getCalendarDateString;\nexports.getDefaultLocale = getDefaultLocale;\nvar _isUndefined = _interopRequireDefault(require(\"lodash/isUndefined\"));\nvar _isDate = _interopRequireDefault(require(\"lodash/isDate\"));\nvar _isString = _interopRequireDefault(require(\"lodash/isString\"));\nvar _isNumber = _interopRequireDefault(require(\"lodash/isNumber\"));\nvar _xdate = _interopRequireDefault(require(\"xdate\"));\nvar _require = require(\"../dateutils\"),\n  getLocale = _require.getLocale;\nvar _require2 = require(\"../interface\"),\n  padNumber = _require2.padNumber,\n  toMarkingFormat = _require2.toMarkingFormat;\nfunction getCalendarDateString(date) {\n  if (!(0, _isUndefined.default)(date)) {\n    if ((0, _isDate.default)(date) && !isNaN(date.getFullYear())) {\n      return date.getFullYear() + '-' + padNumber(date.getMonth() + 1) + '-' + padNumber(date.getDate());\n    } else if ((0, _isString.default)(date)) {\n      return toMarkingFormat(new _xdate.default(date, false));\n    } else if ((0, _isNumber.default)(date)) {\n      return toMarkingFormat(new _xdate.default(date, true));\n    }\n    throw 'Invalid Date';\n  }\n}\nfunction getDefaultLocale() {\n  return getLocale();\n}\nvar _default = {\n  getCalendarDateString: getCalendarDateString,\n  getDefaultLocale: getDefaultLocale\n};\nexports.default = _default;","map":{"version":3,"names":["require","getLocale","padNumber","toMarkingFormat","getCalendarDateString","date","isUndefined","isDate","isNaN","getFullYear","getMonth","getDate","isString","XDate","isNumber","getDefaultLocale"],"sources":["E:/work/PK WORK/calendar-event-app-master/calendar-event-app-master/node_modules/react-native-calendars/src/services/index.js"],"sourcesContent":["import isUndefined from 'lodash/isUndefined';\nimport isDate from 'lodash/isDate';\nimport isString from 'lodash/isString';\nimport isNumber from 'lodash/isNumber';\nimport XDate from 'xdate';\nconst { getLocale } = require('../dateutils');\nconst { padNumber, toMarkingFormat } = require('../interface');\nexport function getCalendarDateString(date) {\n    if (!isUndefined(date)) {\n        if (isDate(date) && !isNaN(date.getFullYear())) {\n            return date.getFullYear() + '-' + padNumber(date.getMonth() + 1) + '-' + padNumber(date.getDate());\n        }\n        else if (isString(date)) {\n            // issue with strings and XDate's utc-mode - returns one day before\n            return toMarkingFormat(new XDate(date, false));\n        }\n        else if (isNumber(date)) {\n            return toMarkingFormat(new XDate(date, true));\n        }\n        throw 'Invalid Date';\n    }\n}\nexport function getDefaultLocale() {\n    return getLocale();\n}\nexport default {\n    getCalendarDateString,\n    getDefaultLocale\n};\n"],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA,eAAsBA,OAAO,gBAAgB;EAArCC,SAAS,YAATA,SAAS;AACjB,gBAAuCD,OAAO,gBAAgB;EAAtDE,SAAS,aAATA,SAAS;EAAEC,eAAe,aAAfA,eAAe;AAC3B,SAASC,qBAAqB,CAACC,IAAI,EAAE;EACxC,IAAI,CAAC,IAAAC,oBAAW,EAACD,IAAI,CAAC,EAAE;IACpB,IAAI,IAAAE,eAAM,EAACF,IAAI,CAAC,IAAI,CAACG,KAAK,CAACH,IAAI,CAACI,WAAW,EAAE,CAAC,EAAE;MAC5C,OAAOJ,IAAI,CAACI,WAAW,EAAE,GAAG,GAAG,GAAGP,SAAS,CAACG,IAAI,CAACK,QAAQ,EAAE,GAAG,CAAC,CAAC,GAAG,GAAG,GAAGR,SAAS,CAACG,IAAI,CAACM,OAAO,EAAE,CAAC;IACtG,CAAC,MACI,IAAI,IAAAC,iBAAQ,EAACP,IAAI,CAAC,EAAE;MAErB,OAAOF,eAAe,CAAC,IAAIU,cAAK,CAACR,IAAI,EAAE,KAAK,CAAC,CAAC;IAClD,CAAC,MACI,IAAI,IAAAS,iBAAQ,EAACT,IAAI,CAAC,EAAE;MACrB,OAAOF,eAAe,CAAC,IAAIU,cAAK,CAACR,IAAI,EAAE,IAAI,CAAC,CAAC;IACjD;IACA,MAAM,cAAc;EACxB;AACJ;AACO,SAASU,gBAAgB,GAAG;EAC/B,OAAOd,SAAS,EAAE;AACtB;AAAC,eACc;EACXG,qBAAqB,EAArBA,qBAAqB;EACrBW,gBAAgB,EAAhBA;AACJ,CAAC;AAAA"},"metadata":{},"sourceType":"script"}